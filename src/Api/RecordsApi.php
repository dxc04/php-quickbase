<?php
/**
 * RecordsApi
 * PHP version 5
 *
 * @category Class
 * @package  Rossity\PhpQuickbase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Quick Base API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Rossity\PhpQuickbase\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Rossity\PhpQuickbase\ApiException;
use Rossity\PhpQuickbase\Configuration;
use Rossity\PhpQuickbase\HeaderSelector;
use Rossity\PhpQuickbase\ObjectSerializer;

/**
 * RecordsApi Class Doc Comment
 *
 * @category Class
 * @package  Rossity\PhpQuickbase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RecordsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteRecords
     *
     * Delete record(s)
     *
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities. (optional)
     * @param  \Rossity\PhpQuickbase\Model\InlineObject12 $generated generated (optional)
     *
     * @throws \Rossity\PhpQuickbase\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,object]
     */
    public function deleteRecords($qBRealmHostname, $authorization, $userAgent = null, $generated = null)
    {
        list($response) = $this->deleteRecordsWithHttpInfo($qBRealmHostname, $authorization, $userAgent, $generated);
        return $response;
    }

    /**
     * Operation deleteRecordsWithHttpInfo
     *
     * Delete record(s)
     *
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities. (optional)
     * @param  \Rossity\PhpQuickbase\Model\InlineObject12 $generated (optional)
     *
     * @throws \Rossity\PhpQuickbase\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRecordsWithHttpInfo($qBRealmHostname, $authorization, $userAgent = null, $generated = null)
    {
        $request = $this->deleteRecordsRequest($qBRealmHostname, $authorization, $userAgent, $generated);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('map[string,object]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'map[string,object]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'map[string,object]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,object]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRecordsAsync
     *
     * Delete record(s)
     *
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities. (optional)
     * @param  \Rossity\PhpQuickbase\Model\InlineObject12 $generated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRecordsAsync($qBRealmHostname, $authorization, $userAgent = null, $generated = null)
    {
        return $this->deleteRecordsAsyncWithHttpInfo($qBRealmHostname, $authorization, $userAgent, $generated)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRecordsAsyncWithHttpInfo
     *
     * Delete record(s)
     *
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities. (optional)
     * @param  \Rossity\PhpQuickbase\Model\InlineObject12 $generated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRecordsAsyncWithHttpInfo($qBRealmHostname, $authorization, $userAgent = null, $generated = null)
    {
        $returnType = 'map[string,object]';
        $request = $this->deleteRecordsRequest($qBRealmHostname, $authorization, $userAgent, $generated);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRecords'
     *
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities. (optional)
     * @param  \Rossity\PhpQuickbase\Model\InlineObject12 $generated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteRecordsRequest($qBRealmHostname, $authorization, $userAgent = null, $generated = null)
    {
        // verify the required parameter 'qBRealmHostname' is set
        if ($qBRealmHostname === null || (is_array($qBRealmHostname) && count($qBRealmHostname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $qBRealmHostname when calling deleteRecords'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling deleteRecords'
            );
        }

        $resourcePath = '/records';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($qBRealmHostname !== null) {
            $headerParams['QB-Realm-Hostname'] = ObjectSerializer::toHeaderValue($qBRealmHostname);
        }
        // header params
        if ($userAgent !== null) {
            $headerParams['User-Agent'] = ObjectSerializer::toHeaderValue($userAgent);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($generated)) {
            $_tempBody = $generated;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation runQuery
     *
     * Query for data
     *
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities. (optional)
     * @param  \Rossity\PhpQuickbase\Model\InlineObject13 $generated generated (optional)
     *
     * @throws \Rossity\PhpQuickbase\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,object]
     */
    public function runQuery($qBRealmHostname, $authorization, $userAgent = null, $generated = null)
    {
        list($response) = $this->runQueryWithHttpInfo($qBRealmHostname, $authorization, $userAgent, $generated);
        return $response;
    }

    /**
     * Operation runQueryWithHttpInfo
     *
     * Query for data
     *
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities. (optional)
     * @param  \Rossity\PhpQuickbase\Model\InlineObject13 $generated (optional)
     *
     * @throws \Rossity\PhpQuickbase\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     */
    public function runQueryWithHttpInfo($qBRealmHostname, $authorization, $userAgent = null, $generated = null)
    {
        $request = $this->runQueryRequest($qBRealmHostname, $authorization, $userAgent, $generated);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('map[string,object]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'map[string,object]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'map[string,object]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,object]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation runQueryAsync
     *
     * Query for data
     *
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities. (optional)
     * @param  \Rossity\PhpQuickbase\Model\InlineObject13 $generated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function runQueryAsync($qBRealmHostname, $authorization, $userAgent = null, $generated = null)
    {
        return $this->runQueryAsyncWithHttpInfo($qBRealmHostname, $authorization, $userAgent, $generated)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation runQueryAsyncWithHttpInfo
     *
     * Query for data
     *
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities. (optional)
     * @param  \Rossity\PhpQuickbase\Model\InlineObject13 $generated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function runQueryAsyncWithHttpInfo($qBRealmHostname, $authorization, $userAgent = null, $generated = null)
    {
        $returnType = 'map[string,object]';
        $request = $this->runQueryRequest($qBRealmHostname, $authorization, $userAgent, $generated);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'runQuery'
     *
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities. (optional)
     * @param  \Rossity\PhpQuickbase\Model\InlineObject13 $generated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function runQueryRequest($qBRealmHostname, $authorization, $userAgent = null, $generated = null)
    {
        // verify the required parameter 'qBRealmHostname' is set
        if ($qBRealmHostname === null || (is_array($qBRealmHostname) && count($qBRealmHostname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $qBRealmHostname when calling runQuery'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling runQuery'
            );
        }

        $resourcePath = '/records/query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($qBRealmHostname !== null) {
            $headerParams['QB-Realm-Hostname'] = ObjectSerializer::toHeaderValue($qBRealmHostname);
        }
        // header params
        if ($userAgent !== null) {
            $headerParams['User-Agent'] = ObjectSerializer::toHeaderValue($userAgent);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($generated)) {
            $_tempBody = $generated;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation upsert
     *
     * Insert/Update record(s)
     *
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities. (optional)
     * @param  \Rossity\PhpQuickbase\Model\InlineObject11 $generated generated (optional)
     *
     * @throws \Rossity\PhpQuickbase\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,object]|map[string,object]
     */
    public function upsert($qBRealmHostname, $authorization, $userAgent = null, $generated = null)
    {
        list($response) = $this->upsertWithHttpInfo($qBRealmHostname, $authorization, $userAgent, $generated);
        return $response;
    }

    /**
     * Operation upsertWithHttpInfo
     *
     * Insert/Update record(s)
     *
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities. (optional)
     * @param  \Rossity\PhpQuickbase\Model\InlineObject11 $generated (optional)
     *
     * @throws \Rossity\PhpQuickbase\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,object]|map[string,object], HTTP status code, HTTP response headers (array of strings)
     */
    public function upsertWithHttpInfo($qBRealmHostname, $authorization, $userAgent = null, $generated = null)
    {
        $request = $this->upsertRequest($qBRealmHostname, $authorization, $userAgent, $generated);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('map[string,object]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'map[string,object]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 207:
                    if ('map[string,object]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'map[string,object]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'map[string,object]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,object]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 207:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,object]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation upsertAsync
     *
     * Insert/Update record(s)
     *
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities. (optional)
     * @param  \Rossity\PhpQuickbase\Model\InlineObject11 $generated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsertAsync($qBRealmHostname, $authorization, $userAgent = null, $generated = null)
    {
        return $this->upsertAsyncWithHttpInfo($qBRealmHostname, $authorization, $userAgent, $generated)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation upsertAsyncWithHttpInfo
     *
     * Insert/Update record(s)
     *
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities. (optional)
     * @param  \Rossity\PhpQuickbase\Model\InlineObject11 $generated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsertAsyncWithHttpInfo($qBRealmHostname, $authorization, $userAgent = null, $generated = null)
    {
        $returnType = 'map[string,object]';
        $request = $this->upsertRequest($qBRealmHostname, $authorization, $userAgent, $generated);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'upsert'
     *
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities. (optional)
     * @param  \Rossity\PhpQuickbase\Model\InlineObject11 $generated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function upsertRequest($qBRealmHostname, $authorization, $userAgent = null, $generated = null)
    {
        // verify the required parameter 'qBRealmHostname' is set
        if ($qBRealmHostname === null || (is_array($qBRealmHostname) && count($qBRealmHostname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $qBRealmHostname when calling upsert'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling upsert'
            );
        }

        $resourcePath = '/records';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($qBRealmHostname !== null) {
            $headerParams['QB-Realm-Hostname'] = ObjectSerializer::toHeaderValue($qBRealmHostname);
        }
        // header params
        if ($userAgent !== null) {
            $headerParams['User-Agent'] = ObjectSerializer::toHeaderValue($userAgent);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($generated)) {
            $_tempBody = $generated;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
