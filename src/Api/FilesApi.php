<?php
/**
 * FilesApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Rossity\PhpQuickbase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Quick Base API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Rossity\PhpQuickbase\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Rossity\PhpQuickbase\ApiException;
use Rossity\PhpQuickbase\Configuration;
use Rossity\PhpQuickbase\HeaderSelector;
use Rossity\PhpQuickbase\ObjectSerializer;

/**
 * FilesApi Class Doc Comment
 *
 * @category Class
 * @package  Rossity\PhpQuickbase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FilesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteFile
     *
     * Delete file
     *
     * @param  string $tableId The unique identifier of the table. (required)
     * @param  int $recordId The unique identifier of the record. (required)
     * @param  int $fieldId The unique identifier of the field. (required)
     * @param  int $versionNumber The file attachment version number. (required)
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent Information is entered by the person or utility invoking the API. Choose between the default in your toolkit or custom create it. Being as descriptive as possible will help in identification and troubleshooting. (optional)
     *
     * @throws \Rossity\PhpQuickbase\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,object]
     */
    public function deleteFile($tableId, $recordId, $fieldId, $versionNumber, $qBRealmHostname, $authorization, $userAgent = null)
    {
        list($response) = $this->deleteFileWithHttpInfo($tableId, $recordId, $fieldId, $versionNumber, $qBRealmHostname, $authorization, $userAgent);
        return $response;
    }

    /**
     * Operation deleteFileWithHttpInfo
     *
     * Delete file
     *
     * @param  string $tableId The unique identifier of the table. (required)
     * @param  int $recordId The unique identifier of the record. (required)
     * @param  int $fieldId The unique identifier of the field. (required)
     * @param  int $versionNumber The file attachment version number. (required)
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent Information is entered by the person or utility invoking the API. Choose between the default in your toolkit or custom create it. Being as descriptive as possible will help in identification and troubleshooting. (optional)
     *
     * @throws \Rossity\PhpQuickbase\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFileWithHttpInfo($tableId, $recordId, $fieldId, $versionNumber, $qBRealmHostname, $authorization, $userAgent = null)
    {
        $request = $this->deleteFileRequest($tableId, $recordId, $fieldId, $versionNumber, $qBRealmHostname, $authorization, $userAgent);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('map[string,object]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'map[string,object]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'map[string,object]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,object]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFileAsync
     *
     * Delete file
     *
     * @param  string $tableId The unique identifier of the table. (required)
     * @param  int $recordId The unique identifier of the record. (required)
     * @param  int $fieldId The unique identifier of the field. (required)
     * @param  int $versionNumber The file attachment version number. (required)
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent Information is entered by the person or utility invoking the API. Choose between the default in your toolkit or custom create it. Being as descriptive as possible will help in identification and troubleshooting. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFileAsync($tableId, $recordId, $fieldId, $versionNumber, $qBRealmHostname, $authorization, $userAgent = null)
    {
        return $this->deleteFileAsyncWithHttpInfo($tableId, $recordId, $fieldId, $versionNumber, $qBRealmHostname, $authorization, $userAgent)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFileAsyncWithHttpInfo
     *
     * Delete file
     *
     * @param  string $tableId The unique identifier of the table. (required)
     * @param  int $recordId The unique identifier of the record. (required)
     * @param  int $fieldId The unique identifier of the field. (required)
     * @param  int $versionNumber The file attachment version number. (required)
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent Information is entered by the person or utility invoking the API. Choose between the default in your toolkit or custom create it. Being as descriptive as possible will help in identification and troubleshooting. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFileAsyncWithHttpInfo($tableId, $recordId, $fieldId, $versionNumber, $qBRealmHostname, $authorization, $userAgent = null)
    {
        $returnType = 'map[string,object]';
        $request = $this->deleteFileRequest($tableId, $recordId, $fieldId, $versionNumber, $qBRealmHostname, $authorization, $userAgent);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFile'
     *
     * @param  string $tableId The unique identifier of the table. (required)
     * @param  int $recordId The unique identifier of the record. (required)
     * @param  int $fieldId The unique identifier of the field. (required)
     * @param  int $versionNumber The file attachment version number. (required)
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent Information is entered by the person or utility invoking the API. Choose between the default in your toolkit or custom create it. Being as descriptive as possible will help in identification and troubleshooting. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFileRequest($tableId, $recordId, $fieldId, $versionNumber, $qBRealmHostname, $authorization, $userAgent = null)
    {
        // verify the required parameter 'tableId' is set
        if ($tableId === null || (is_array($tableId) && count($tableId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tableId when calling deleteFile'
            );
        }
        // verify the required parameter 'recordId' is set
        if ($recordId === null || (is_array($recordId) && count($recordId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recordId when calling deleteFile'
            );
        }
        // verify the required parameter 'fieldId' is set
        if ($fieldId === null || (is_array($fieldId) && count($fieldId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fieldId when calling deleteFile'
            );
        }
        // verify the required parameter 'versionNumber' is set
        if ($versionNumber === null || (is_array($versionNumber) && count($versionNumber) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $versionNumber when calling deleteFile'
            );
        }
        // verify the required parameter 'qBRealmHostname' is set
        if ($qBRealmHostname === null || (is_array($qBRealmHostname) && count($qBRealmHostname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $qBRealmHostname when calling deleteFile'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling deleteFile'
            );
        }

        $resourcePath = '/files/{tableId}/{recordId}/{fieldId}/{versionNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($qBRealmHostname !== null) {
            $headerParams['QB-Realm-Hostname'] = ObjectSerializer::toHeaderValue($qBRealmHostname);
        }
        // header params
        if ($userAgent !== null) {
            $headerParams['User-Agent'] = ObjectSerializer::toHeaderValue($userAgent);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($tableId !== null) {
            $resourcePath = str_replace(
                '{' . 'tableId' . '}',
                ObjectSerializer::toPathValue($tableId),
                $resourcePath
            );
        }
        // path params
        if ($recordId !== null) {
            $resourcePath = str_replace(
                '{' . 'recordId' . '}',
                ObjectSerializer::toPathValue($recordId),
                $resourcePath
            );
        }
        // path params
        if ($fieldId !== null) {
            $resourcePath = str_replace(
                '{' . 'fieldId' . '}',
                ObjectSerializer::toPathValue($fieldId),
                $resourcePath
            );
        }
        // path params
        if ($versionNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'versionNumber' . '}',
                ObjectSerializer::toPathValue($versionNumber),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadFile
     *
     * Download file
     *
     * @param  string $tableId The unique identifier of the table. (required)
     * @param  int $recordId The unique identifier of the record. (required)
     * @param  int $fieldId The unique identifier of the field. (required)
     * @param  int $versionNumber The file attachment version number. (required)
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent Information is entered by the person or utility invoking the API. Choose between the default in your toolkit or custom create it. Being as descriptive as possible will help in identification and troubleshooting. (optional)
     *
     * @throws \Rossity\PhpQuickbase\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function downloadFile($tableId, $recordId, $fieldId, $versionNumber, $qBRealmHostname, $authorization, $userAgent = null)
    {
        list($response) = $this->downloadFileWithHttpInfo($tableId, $recordId, $fieldId, $versionNumber, $qBRealmHostname, $authorization, $userAgent);
        return $response;
    }

    /**
     * Operation downloadFileWithHttpInfo
     *
     * Download file
     *
     * @param  string $tableId The unique identifier of the table. (required)
     * @param  int $recordId The unique identifier of the record. (required)
     * @param  int $fieldId The unique identifier of the field. (required)
     * @param  int $versionNumber The file attachment version number. (required)
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent Information is entered by the person or utility invoking the API. Choose between the default in your toolkit or custom create it. Being as descriptive as possible will help in identification and troubleshooting. (optional)
     *
     * @throws \Rossity\PhpQuickbase\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadFileWithHttpInfo($tableId, $recordId, $fieldId, $versionNumber, $qBRealmHostname, $authorization, $userAgent = null)
    {
        $request = $this->downloadFileRequest($tableId, $recordId, $fieldId, $versionNumber, $qBRealmHostname, $authorization, $userAgent);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadFileAsync
     *
     * Download file
     *
     * @param  string $tableId The unique identifier of the table. (required)
     * @param  int $recordId The unique identifier of the record. (required)
     * @param  int $fieldId The unique identifier of the field. (required)
     * @param  int $versionNumber The file attachment version number. (required)
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent Information is entered by the person or utility invoking the API. Choose between the default in your toolkit or custom create it. Being as descriptive as possible will help in identification and troubleshooting. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadFileAsync($tableId, $recordId, $fieldId, $versionNumber, $qBRealmHostname, $authorization, $userAgent = null)
    {
        return $this->downloadFileAsyncWithHttpInfo($tableId, $recordId, $fieldId, $versionNumber, $qBRealmHostname, $authorization, $userAgent)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadFileAsyncWithHttpInfo
     *
     * Download file
     *
     * @param  string $tableId The unique identifier of the table. (required)
     * @param  int $recordId The unique identifier of the record. (required)
     * @param  int $fieldId The unique identifier of the field. (required)
     * @param  int $versionNumber The file attachment version number. (required)
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent Information is entered by the person or utility invoking the API. Choose between the default in your toolkit or custom create it. Being as descriptive as possible will help in identification and troubleshooting. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadFileAsyncWithHttpInfo($tableId, $recordId, $fieldId, $versionNumber, $qBRealmHostname, $authorization, $userAgent = null)
    {
        $returnType = 'object';
        $request = $this->downloadFileRequest($tableId, $recordId, $fieldId, $versionNumber, $qBRealmHostname, $authorization, $userAgent);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadFile'
     *
     * @param  string $tableId The unique identifier of the table. (required)
     * @param  int $recordId The unique identifier of the record. (required)
     * @param  int $fieldId The unique identifier of the field. (required)
     * @param  int $versionNumber The file attachment version number. (required)
     * @param  string $qBRealmHostname Your Quick Base domain, for example demo.quickbase.com (required)
     * @param  string $authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth). (required)
     * @param  string $userAgent Information is entered by the person or utility invoking the API. Choose between the default in your toolkit or custom create it. Being as descriptive as possible will help in identification and troubleshooting. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function downloadFileRequest($tableId, $recordId, $fieldId, $versionNumber, $qBRealmHostname, $authorization, $userAgent = null)
    {
        // verify the required parameter 'tableId' is set
        if ($tableId === null || (is_array($tableId) && count($tableId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tableId when calling downloadFile'
            );
        }
        // verify the required parameter 'recordId' is set
        if ($recordId === null || (is_array($recordId) && count($recordId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recordId when calling downloadFile'
            );
        }
        // verify the required parameter 'fieldId' is set
        if ($fieldId === null || (is_array($fieldId) && count($fieldId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fieldId when calling downloadFile'
            );
        }
        // verify the required parameter 'versionNumber' is set
        if ($versionNumber === null || (is_array($versionNumber) && count($versionNumber) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $versionNumber when calling downloadFile'
            );
        }
        // verify the required parameter 'qBRealmHostname' is set
        if ($qBRealmHostname === null || (is_array($qBRealmHostname) && count($qBRealmHostname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $qBRealmHostname when calling downloadFile'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling downloadFile'
            );
        }

        $resourcePath = '/files/{tableId}/{recordId}/{fieldId}/{versionNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($qBRealmHostname !== null) {
            $headerParams['QB-Realm-Hostname'] = ObjectSerializer::toHeaderValue($qBRealmHostname);
        }
        // header params
        if ($userAgent !== null) {
            $headerParams['User-Agent'] = ObjectSerializer::toHeaderValue($userAgent);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($tableId !== null) {
            $resourcePath = str_replace(
                '{' . 'tableId' . '}',
                ObjectSerializer::toPathValue($tableId),
                $resourcePath
            );
        }
        // path params
        if ($recordId !== null) {
            $resourcePath = str_replace(
                '{' . 'recordId' . '}',
                ObjectSerializer::toPathValue($recordId),
                $resourcePath
            );
        }
        // path params
        if ($fieldId !== null) {
            $resourcePath = str_replace(
                '{' . 'fieldId' . '}',
                ObjectSerializer::toPathValue($fieldId),
                $resourcePath
            );
        }
        // path params
        if ($versionNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'versionNumber' . '}',
                ObjectSerializer::toPathValue($versionNumber),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
