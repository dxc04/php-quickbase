<?php
/**
 * InlineResponse2003
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Rossity\PhpQuickbase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Quick Base API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Rossity\PhpQuickbase\Model;

use \ArrayAccess;
use \Rossity\PhpQuickbase\ObjectSerializer;

/**
 * InlineResponse2003 Class Doc Comment
 *
 * @category Class
 * @package  Rossity\PhpQuickbase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineResponse2003 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'fieldType' => 'string',
        'mode' => 'string',
        'label' => 'string',
        'noWrap' => 'bool',
        'bold' => 'bool',
        'required' => 'bool',
        'appearsByDefault' => 'bool',
        'findEnabled' => 'bool',
        'allowNewChoices' => 'bool',
        'sortAsGiven' => 'bool',
        'carryChoices' => 'bool',
        'foreignKey' => 'bool',
        'unique' => 'bool',
        'doesDataCopy' => 'bool',
        'fieldHelp' => 'string',
        'audited' => 'bool',
        'numLines' => 'int',
        'maxLength' => 'int',
        'appendOnly' => 'bool',
        'allowHTML' => 'bool',
        'hasExtension' => 'bool',
        'units' => 'string',
        'decimalPlaces' => 'int',
        'commaStart' => 'int',
        'numberFormat' => 'int',
        'doesAverage' => 'bool',
        'doesTotal' => 'bool',
        'blankIsZero' => 'bool',
        'currencySymbol' => 'string',
        'currencyFormat' => 'string',
        'displayTime' => 'bool',
        'displayRelative' => 'bool',
        'displayMonth' => 'string',
        'defaultToday' => 'bool',
        'displayDayOfWeek' => 'bool',
        'displayTimezone' => 'bool',
        'workWeek' => 'int',
        'startField' => 'int',
        'durationField' => 'int',
        'format' => 'int',
        'hours24' => 'bool',
        'displayUser' => 'string',
        'defaultKind' => 'string',
        'defaultValueLuid' => 'int',
        'choicesLuid' => 'string[]',
        'choices' => 'string[]',
        'compositeFields' => 'string[]',
        'targetTableId' => 'string',
        'targetFieldId' => 'int',
        'sourceFieldId' => 'int',
        'useNewWindow' => 'bool',
        'linkText' => 'string',
        'exact' => 'bool',
        'displayImages' => 'bool',
        'defaultDomain' => 'string',
        'displayEmail' => 'string',
        'appearsAs' => 'string',
        'abbreviate' => 'bool',
        'autoSave' => 'bool',
        'targetTableName' => 'string',
        'displayAsLink' => 'bool',
        'sortAlpha' => 'bool',
        'coverText' => 'string',
        'versionMode' => 'string',
        'maxVersions' => 'int',
        'seeVersions' => 'bool',
        'width' => 'int',
        'xmlTag' => 'string',
        'formula' => 'string',
        'defaultValue' => 'string',
        'comments' => 'string',
        'masterChoiceTableId' => 'int',
        'masterChoiceFieldId' => 'int',
        'snapFieldId' => 'int',
        'parentFieldId' => 'int',
        'lookupTargetFieldId' => 'int',
        'lookupReferenceFieldId' => 'int',
        'summaryReferenceFieldId' => 'int',
        'summaryTargetFieldId' => 'int',
        'summaryFunction' => 'string',
        'masterTableTag' => 'string',
        'permissions' => '\Rossity\PhpQuickbase\Model\FieldsPermissions[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'fieldType' => null,
        'mode' => null,
        'label' => null,
        'noWrap' => null,
        'bold' => null,
        'required' => null,
        'appearsByDefault' => null,
        'findEnabled' => null,
        'allowNewChoices' => null,
        'sortAsGiven' => null,
        'carryChoices' => null,
        'foreignKey' => null,
        'unique' => null,
        'doesDataCopy' => null,
        'fieldHelp' => null,
        'audited' => null,
        'numLines' => null,
        'maxLength' => null,
        'appendOnly' => null,
        'allowHTML' => null,
        'hasExtension' => null,
        'units' => null,
        'decimalPlaces' => null,
        'commaStart' => null,
        'numberFormat' => null,
        'doesAverage' => null,
        'doesTotal' => null,
        'blankIsZero' => null,
        'currencySymbol' => null,
        'currencyFormat' => null,
        'displayTime' => null,
        'displayRelative' => null,
        'displayMonth' => null,
        'defaultToday' => null,
        'displayDayOfWeek' => null,
        'displayTimezone' => null,
        'workWeek' => null,
        'startField' => null,
        'durationField' => null,
        'format' => null,
        'hours24' => null,
        'displayUser' => null,
        'defaultKind' => null,
        'defaultValueLuid' => null,
        'choicesLuid' => null,
        'choices' => null,
        'compositeFields' => null,
        'targetTableId' => null,
        'targetFieldId' => null,
        'sourceFieldId' => null,
        'useNewWindow' => null,
        'linkText' => null,
        'exact' => null,
        'displayImages' => null,
        'defaultDomain' => null,
        'displayEmail' => null,
        'appearsAs' => null,
        'abbreviate' => null,
        'autoSave' => null,
        'targetTableName' => null,
        'displayAsLink' => null,
        'sortAlpha' => null,
        'coverText' => null,
        'versionMode' => null,
        'maxVersions' => null,
        'seeVersions' => null,
        'width' => null,
        'xmlTag' => null,
        'formula' => null,
        'defaultValue' => null,
        'comments' => null,
        'masterChoiceTableId' => 'int64',
        'masterChoiceFieldId' => null,
        'snapFieldId' => null,
        'parentFieldId' => null,
        'lookupTargetFieldId' => null,
        'lookupReferenceFieldId' => null,
        'summaryReferenceFieldId' => 'int64',
        'summaryTargetFieldId' => null,
        'summaryFunction' => null,
        'masterTableTag' => null,
        'permissions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'fieldType' => 'fieldType',
        'mode' => 'mode',
        'label' => 'label',
        'noWrap' => 'noWrap',
        'bold' => 'bold',
        'required' => 'required',
        'appearsByDefault' => 'appearsByDefault',
        'findEnabled' => 'findEnabled',
        'allowNewChoices' => 'allowNewChoices',
        'sortAsGiven' => 'sortAsGiven',
        'carryChoices' => 'carryChoices',
        'foreignKey' => 'foreignKey',
        'unique' => 'unique',
        'doesDataCopy' => 'doesDataCopy',
        'fieldHelp' => 'fieldHelp',
        'audited' => 'audited',
        'numLines' => 'numLines',
        'maxLength' => 'maxLength',
        'appendOnly' => 'appendOnly',
        'allowHTML' => 'allowHTML',
        'hasExtension' => 'hasExtension',
        'units' => 'units',
        'decimalPlaces' => 'decimalPlaces',
        'commaStart' => 'commaStart',
        'numberFormat' => 'numberFormat',
        'doesAverage' => 'doesAverage',
        'doesTotal' => 'doesTotal',
        'blankIsZero' => 'blankIsZero',
        'currencySymbol' => 'currencySymbol',
        'currencyFormat' => 'currencyFormat',
        'displayTime' => 'displayTime',
        'displayRelative' => 'displayRelative',
        'displayMonth' => 'displayMonth',
        'defaultToday' => 'defaultToday',
        'displayDayOfWeek' => 'displayDayOfWeek',
        'displayTimezone' => 'displayTimezone',
        'workWeek' => 'workWeek',
        'startField' => 'startField',
        'durationField' => 'durationField',
        'format' => 'format',
        'hours24' => 'hours24',
        'displayUser' => 'displayUser',
        'defaultKind' => 'defaultKind',
        'defaultValueLuid' => 'defaultValueLuid',
        'choicesLuid' => 'choicesLuid',
        'choices' => 'choices',
        'compositeFields' => 'compositeFields',
        'targetTableId' => 'targetTableId',
        'targetFieldId' => 'targetFieldId',
        'sourceFieldId' => 'sourceFieldId',
        'useNewWindow' => 'useNewWindow',
        'linkText' => 'linkText',
        'exact' => 'exact',
        'displayImages' => 'displayImages',
        'defaultDomain' => 'defaultDomain',
        'displayEmail' => 'displayEmail',
        'appearsAs' => 'appearsAs',
        'abbreviate' => 'abbreviate',
        'autoSave' => 'autoSave',
        'targetTableName' => 'targetTableName',
        'displayAsLink' => 'displayAsLink',
        'sortAlpha' => 'sortAlpha',
        'coverText' => 'coverText',
        'versionMode' => 'versionMode',
        'maxVersions' => 'maxVersions',
        'seeVersions' => 'seeVersions',
        'width' => 'width',
        'xmlTag' => 'xmlTag',
        'formula' => 'formula',
        'defaultValue' => 'defaultValue',
        'comments' => 'comments',
        'masterChoiceTableId' => 'masterChoiceTableId',
        'masterChoiceFieldId' => 'masterChoiceFieldId',
        'snapFieldId' => 'snapFieldId',
        'parentFieldId' => 'parentFieldId',
        'lookupTargetFieldId' => 'lookupTargetFieldId',
        'lookupReferenceFieldId' => 'lookupReferenceFieldId',
        'summaryReferenceFieldId' => 'summaryReferenceFieldId',
        'summaryTargetFieldId' => 'summaryTargetFieldId',
        'summaryFunction' => 'summaryFunction',
        'masterTableTag' => 'masterTableTag',
        'permissions' => 'permissions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'fieldType' => 'setFieldType',
        'mode' => 'setMode',
        'label' => 'setLabel',
        'noWrap' => 'setNoWrap',
        'bold' => 'setBold',
        'required' => 'setRequired',
        'appearsByDefault' => 'setAppearsByDefault',
        'findEnabled' => 'setFindEnabled',
        'allowNewChoices' => 'setAllowNewChoices',
        'sortAsGiven' => 'setSortAsGiven',
        'carryChoices' => 'setCarryChoices',
        'foreignKey' => 'setForeignKey',
        'unique' => 'setUnique',
        'doesDataCopy' => 'setDoesDataCopy',
        'fieldHelp' => 'setFieldHelp',
        'audited' => 'setAudited',
        'numLines' => 'setNumLines',
        'maxLength' => 'setMaxLength',
        'appendOnly' => 'setAppendOnly',
        'allowHTML' => 'setAllowHTML',
        'hasExtension' => 'setHasExtension',
        'units' => 'setUnits',
        'decimalPlaces' => 'setDecimalPlaces',
        'commaStart' => 'setCommaStart',
        'numberFormat' => 'setNumberFormat',
        'doesAverage' => 'setDoesAverage',
        'doesTotal' => 'setDoesTotal',
        'blankIsZero' => 'setBlankIsZero',
        'currencySymbol' => 'setCurrencySymbol',
        'currencyFormat' => 'setCurrencyFormat',
        'displayTime' => 'setDisplayTime',
        'displayRelative' => 'setDisplayRelative',
        'displayMonth' => 'setDisplayMonth',
        'defaultToday' => 'setDefaultToday',
        'displayDayOfWeek' => 'setDisplayDayOfWeek',
        'displayTimezone' => 'setDisplayTimezone',
        'workWeek' => 'setWorkWeek',
        'startField' => 'setStartField',
        'durationField' => 'setDurationField',
        'format' => 'setFormat',
        'hours24' => 'setHours24',
        'displayUser' => 'setDisplayUser',
        'defaultKind' => 'setDefaultKind',
        'defaultValueLuid' => 'setDefaultValueLuid',
        'choicesLuid' => 'setChoicesLuid',
        'choices' => 'setChoices',
        'compositeFields' => 'setCompositeFields',
        'targetTableId' => 'setTargetTableId',
        'targetFieldId' => 'setTargetFieldId',
        'sourceFieldId' => 'setSourceFieldId',
        'useNewWindow' => 'setUseNewWindow',
        'linkText' => 'setLinkText',
        'exact' => 'setExact',
        'displayImages' => 'setDisplayImages',
        'defaultDomain' => 'setDefaultDomain',
        'displayEmail' => 'setDisplayEmail',
        'appearsAs' => 'setAppearsAs',
        'abbreviate' => 'setAbbreviate',
        'autoSave' => 'setAutoSave',
        'targetTableName' => 'setTargetTableName',
        'displayAsLink' => 'setDisplayAsLink',
        'sortAlpha' => 'setSortAlpha',
        'coverText' => 'setCoverText',
        'versionMode' => 'setVersionMode',
        'maxVersions' => 'setMaxVersions',
        'seeVersions' => 'setSeeVersions',
        'width' => 'setWidth',
        'xmlTag' => 'setXmlTag',
        'formula' => 'setFormula',
        'defaultValue' => 'setDefaultValue',
        'comments' => 'setComments',
        'masterChoiceTableId' => 'setMasterChoiceTableId',
        'masterChoiceFieldId' => 'setMasterChoiceFieldId',
        'snapFieldId' => 'setSnapFieldId',
        'parentFieldId' => 'setParentFieldId',
        'lookupTargetFieldId' => 'setLookupTargetFieldId',
        'lookupReferenceFieldId' => 'setLookupReferenceFieldId',
        'summaryReferenceFieldId' => 'setSummaryReferenceFieldId',
        'summaryTargetFieldId' => 'setSummaryTargetFieldId',
        'summaryFunction' => 'setSummaryFunction',
        'masterTableTag' => 'setMasterTableTag',
        'permissions' => 'setPermissions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'fieldType' => 'getFieldType',
        'mode' => 'getMode',
        'label' => 'getLabel',
        'noWrap' => 'getNoWrap',
        'bold' => 'getBold',
        'required' => 'getRequired',
        'appearsByDefault' => 'getAppearsByDefault',
        'findEnabled' => 'getFindEnabled',
        'allowNewChoices' => 'getAllowNewChoices',
        'sortAsGiven' => 'getSortAsGiven',
        'carryChoices' => 'getCarryChoices',
        'foreignKey' => 'getForeignKey',
        'unique' => 'getUnique',
        'doesDataCopy' => 'getDoesDataCopy',
        'fieldHelp' => 'getFieldHelp',
        'audited' => 'getAudited',
        'numLines' => 'getNumLines',
        'maxLength' => 'getMaxLength',
        'appendOnly' => 'getAppendOnly',
        'allowHTML' => 'getAllowHTML',
        'hasExtension' => 'getHasExtension',
        'units' => 'getUnits',
        'decimalPlaces' => 'getDecimalPlaces',
        'commaStart' => 'getCommaStart',
        'numberFormat' => 'getNumberFormat',
        'doesAverage' => 'getDoesAverage',
        'doesTotal' => 'getDoesTotal',
        'blankIsZero' => 'getBlankIsZero',
        'currencySymbol' => 'getCurrencySymbol',
        'currencyFormat' => 'getCurrencyFormat',
        'displayTime' => 'getDisplayTime',
        'displayRelative' => 'getDisplayRelative',
        'displayMonth' => 'getDisplayMonth',
        'defaultToday' => 'getDefaultToday',
        'displayDayOfWeek' => 'getDisplayDayOfWeek',
        'displayTimezone' => 'getDisplayTimezone',
        'workWeek' => 'getWorkWeek',
        'startField' => 'getStartField',
        'durationField' => 'getDurationField',
        'format' => 'getFormat',
        'hours24' => 'getHours24',
        'displayUser' => 'getDisplayUser',
        'defaultKind' => 'getDefaultKind',
        'defaultValueLuid' => 'getDefaultValueLuid',
        'choicesLuid' => 'getChoicesLuid',
        'choices' => 'getChoices',
        'compositeFields' => 'getCompositeFields',
        'targetTableId' => 'getTargetTableId',
        'targetFieldId' => 'getTargetFieldId',
        'sourceFieldId' => 'getSourceFieldId',
        'useNewWindow' => 'getUseNewWindow',
        'linkText' => 'getLinkText',
        'exact' => 'getExact',
        'displayImages' => 'getDisplayImages',
        'defaultDomain' => 'getDefaultDomain',
        'displayEmail' => 'getDisplayEmail',
        'appearsAs' => 'getAppearsAs',
        'abbreviate' => 'getAbbreviate',
        'autoSave' => 'getAutoSave',
        'targetTableName' => 'getTargetTableName',
        'displayAsLink' => 'getDisplayAsLink',
        'sortAlpha' => 'getSortAlpha',
        'coverText' => 'getCoverText',
        'versionMode' => 'getVersionMode',
        'maxVersions' => 'getMaxVersions',
        'seeVersions' => 'getSeeVersions',
        'width' => 'getWidth',
        'xmlTag' => 'getXmlTag',
        'formula' => 'getFormula',
        'defaultValue' => 'getDefaultValue',
        'comments' => 'getComments',
        'masterChoiceTableId' => 'getMasterChoiceTableId',
        'masterChoiceFieldId' => 'getMasterChoiceFieldId',
        'snapFieldId' => 'getSnapFieldId',
        'parentFieldId' => 'getParentFieldId',
        'lookupTargetFieldId' => 'getLookupTargetFieldId',
        'lookupReferenceFieldId' => 'getLookupReferenceFieldId',
        'summaryReferenceFieldId' => 'getSummaryReferenceFieldId',
        'summaryTargetFieldId' => 'getSummaryTargetFieldId',
        'summaryFunction' => 'getSummaryFunction',
        'masterTableTag' => 'getMasterTableTag',
        'permissions' => 'getPermissions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const VERSION_MODE_KEEPALLVERSIONS = 'keepallversions';
    const VERSION_MODE_KEEPLASTVERSIONS = 'keeplastversions';
    const SUMMARY_FUNCTION_AVG = 'AVG';
    const SUMMARY_FUNCTION_SUM = 'SUM';
    const SUMMARY_FUNCTION_MAX = 'MAX';
    const SUMMARY_FUNCTION_MIN = 'MIN';
    const SUMMARY_FUNCTION_STD_DEV = 'STD-DEV';
    const SUMMARY_FUNCTION_COUNT = 'COUNT';
    const SUMMARY_FUNCTION_COMBINED_TEXT = 'COMBINED-TEXT';
    const SUMMARY_FUNCTION_DISTINCT_COUNT = 'DISTINCT-COUNT';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVersionModeAllowableValues()
    {
        return [
            self::VERSION_MODE_KEEPALLVERSIONS,
            self::VERSION_MODE_KEEPLASTVERSIONS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSummaryFunctionAllowableValues()
    {
        return [
            self::SUMMARY_FUNCTION_AVG,
            self::SUMMARY_FUNCTION_SUM,
            self::SUMMARY_FUNCTION_MAX,
            self::SUMMARY_FUNCTION_MIN,
            self::SUMMARY_FUNCTION_STD_DEV,
            self::SUMMARY_FUNCTION_COUNT,
            self::SUMMARY_FUNCTION_COMBINED_TEXT,
            self::SUMMARY_FUNCTION_DISTINCT_COUNT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['fieldType'] = $data['fieldType'] ?? null;
        $this->container['mode'] = $data['mode'] ?? null;
        $this->container['label'] = $data['label'] ?? null;
        $this->container['noWrap'] = $data['noWrap'] ?? null;
        $this->container['bold'] = $data['bold'] ?? null;
        $this->container['required'] = $data['required'] ?? null;
        $this->container['appearsByDefault'] = $data['appearsByDefault'] ?? null;
        $this->container['findEnabled'] = $data['findEnabled'] ?? null;
        $this->container['allowNewChoices'] = $data['allowNewChoices'] ?? null;
        $this->container['sortAsGiven'] = $data['sortAsGiven'] ?? null;
        $this->container['carryChoices'] = $data['carryChoices'] ?? null;
        $this->container['foreignKey'] = $data['foreignKey'] ?? null;
        $this->container['unique'] = $data['unique'] ?? null;
        $this->container['doesDataCopy'] = $data['doesDataCopy'] ?? null;
        $this->container['fieldHelp'] = $data['fieldHelp'] ?? null;
        $this->container['audited'] = $data['audited'] ?? null;
        $this->container['numLines'] = $data['numLines'] ?? null;
        $this->container['maxLength'] = $data['maxLength'] ?? null;
        $this->container['appendOnly'] = $data['appendOnly'] ?? null;
        $this->container['allowHTML'] = $data['allowHTML'] ?? null;
        $this->container['hasExtension'] = $data['hasExtension'] ?? null;
        $this->container['units'] = $data['units'] ?? null;
        $this->container['decimalPlaces'] = $data['decimalPlaces'] ?? null;
        $this->container['commaStart'] = $data['commaStart'] ?? null;
        $this->container['numberFormat'] = $data['numberFormat'] ?? null;
        $this->container['doesAverage'] = $data['doesAverage'] ?? null;
        $this->container['doesTotal'] = $data['doesTotal'] ?? null;
        $this->container['blankIsZero'] = $data['blankIsZero'] ?? null;
        $this->container['currencySymbol'] = $data['currencySymbol'] ?? null;
        $this->container['currencyFormat'] = $data['currencyFormat'] ?? null;
        $this->container['displayTime'] = $data['displayTime'] ?? null;
        $this->container['displayRelative'] = $data['displayRelative'] ?? null;
        $this->container['displayMonth'] = $data['displayMonth'] ?? null;
        $this->container['defaultToday'] = $data['defaultToday'] ?? null;
        $this->container['displayDayOfWeek'] = $data['displayDayOfWeek'] ?? null;
        $this->container['displayTimezone'] = $data['displayTimezone'] ?? null;
        $this->container['workWeek'] = $data['workWeek'] ?? null;
        $this->container['startField'] = $data['startField'] ?? null;
        $this->container['durationField'] = $data['durationField'] ?? null;
        $this->container['format'] = $data['format'] ?? null;
        $this->container['hours24'] = $data['hours24'] ?? null;
        $this->container['displayUser'] = $data['displayUser'] ?? null;
        $this->container['defaultKind'] = $data['defaultKind'] ?? null;
        $this->container['defaultValueLuid'] = $data['defaultValueLuid'] ?? null;
        $this->container['choicesLuid'] = $data['choicesLuid'] ?? null;
        $this->container['choices'] = $data['choices'] ?? null;
        $this->container['compositeFields'] = $data['compositeFields'] ?? null;
        $this->container['targetTableId'] = $data['targetTableId'] ?? null;
        $this->container['targetFieldId'] = $data['targetFieldId'] ?? null;
        $this->container['sourceFieldId'] = $data['sourceFieldId'] ?? null;
        $this->container['useNewWindow'] = $data['useNewWindow'] ?? null;
        $this->container['linkText'] = $data['linkText'] ?? null;
        $this->container['exact'] = $data['exact'] ?? null;
        $this->container['displayImages'] = $data['displayImages'] ?? null;
        $this->container['defaultDomain'] = $data['defaultDomain'] ?? null;
        $this->container['displayEmail'] = $data['displayEmail'] ?? null;
        $this->container['appearsAs'] = $data['appearsAs'] ?? null;
        $this->container['abbreviate'] = $data['abbreviate'] ?? null;
        $this->container['autoSave'] = $data['autoSave'] ?? null;
        $this->container['targetTableName'] = $data['targetTableName'] ?? null;
        $this->container['displayAsLink'] = $data['displayAsLink'] ?? null;
        $this->container['sortAlpha'] = $data['sortAlpha'] ?? null;
        $this->container['coverText'] = $data['coverText'] ?? null;
        $this->container['versionMode'] = $data['versionMode'] ?? null;
        $this->container['maxVersions'] = $data['maxVersions'] ?? null;
        $this->container['seeVersions'] = $data['seeVersions'] ?? null;
        $this->container['width'] = $data['width'] ?? null;
        $this->container['xmlTag'] = $data['xmlTag'] ?? null;
        $this->container['formula'] = $data['formula'] ?? null;
        $this->container['defaultValue'] = $data['defaultValue'] ?? null;
        $this->container['comments'] = $data['comments'] ?? null;
        $this->container['masterChoiceTableId'] = $data['masterChoiceTableId'] ?? null;
        $this->container['masterChoiceFieldId'] = $data['masterChoiceFieldId'] ?? null;
        $this->container['snapFieldId'] = $data['snapFieldId'] ?? null;
        $this->container['parentFieldId'] = $data['parentFieldId'] ?? null;
        $this->container['lookupTargetFieldId'] = $data['lookupTargetFieldId'] ?? null;
        $this->container['lookupReferenceFieldId'] = $data['lookupReferenceFieldId'] ?? null;
        $this->container['summaryReferenceFieldId'] = $data['summaryReferenceFieldId'] ?? null;
        $this->container['summaryTargetFieldId'] = $data['summaryTargetFieldId'] ?? null;
        $this->container['summaryFunction'] = $data['summaryFunction'] ?? null;
        $this->container['masterTableTag'] = $data['masterTableTag'] ?? null;
        $this->container['permissions'] = $data['permissions'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        $allowedValues = $this->getVersionModeAllowableValues();
        if (!is_null($this->container['versionMode']) && !in_array($this->container['versionMode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'versionMode', must be one of '%s'",
                $this->container['versionMode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSummaryFunctionAllowableValues();
        if (!is_null($this->container['summaryFunction']) && !in_array($this->container['summaryFunction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'summaryFunction', must be one of '%s'",
                $this->container['summaryFunction'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The id of the field, unique to this table.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets fieldType
     *
     * @return string|null
     */
    public function getFieldType()
    {
        return $this->container['fieldType'];
    }

    /**
     * Sets fieldType
     *
     * @param string|null $fieldType The type of field, as described [here](https://help.quickbase.com/user-assistance/field_types.html).
     *
     * @return self
     */
    public function setFieldType($fieldType)
    {
        $this->container['fieldType'] = $fieldType;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode For derived fields, this will be 'lookup', 'summary', or 'formula', to indicate the type of derived field.  For non-derived fields, this will be blank.
     *
     * @return self
     */
    public function setMode($mode)
    {
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label The label (name) of the field.
     *
     * @return self
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets noWrap
     *
     * @return bool|null
     */
    public function getNoWrap()
    {
        return $this->container['noWrap'];
    }

    /**
     * Sets noWrap
     *
     * @param bool|null $noWrap Indicates if the field is configured to not wrap when displayed in the product.
     *
     * @return self
     */
    public function setNoWrap($noWrap)
    {
        $this->container['noWrap'] = $noWrap;

        return $this;
    }

    /**
     * Gets bold
     *
     * @return bool|null
     */
    public function getBold()
    {
        return $this->container['bold'];
    }

    /**
     * Sets bold
     *
     * @param bool|null $bold Indicates if the field is configured to display in bold in the product.
     *
     * @return self
     */
    public function setBold($bold)
    {
        $this->container['bold'] = $bold;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool|null
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool|null $required Indicates if the field is marked required.
     *
     * @return self
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets appearsByDefault
     *
     * @return bool|null
     */
    public function getAppearsByDefault()
    {
        return $this->container['appearsByDefault'];
    }

    /**
     * Sets appearsByDefault
     *
     * @param bool|null $appearsByDefault Indicates if the field is marked as a default in reports.
     *
     * @return self
     */
    public function setAppearsByDefault($appearsByDefault)
    {
        $this->container['appearsByDefault'] = $appearsByDefault;

        return $this;
    }

    /**
     * Gets findEnabled
     *
     * @return bool|null
     */
    public function getFindEnabled()
    {
        return $this->container['findEnabled'];
    }

    /**
     * Sets findEnabled
     *
     * @param bool|null $findEnabled Indicates if the field is marked as searchable.
     *
     * @return self
     */
    public function setFindEnabled($findEnabled)
    {
        $this->container['findEnabled'] = $findEnabled;

        return $this;
    }

    /**
     * Gets allowNewChoices
     *
     * @return bool|null
     */
    public function getAllowNewChoices()
    {
        return $this->container['allowNewChoices'];
    }

    /**
     * Sets allowNewChoices
     *
     * @param bool|null $allowNewChoices Indicates if users can add new choices to a selection list.
     *
     * @return self
     */
    public function setAllowNewChoices($allowNewChoices)
    {
        $this->container['allowNewChoices'] = $allowNewChoices;

        return $this;
    }

    /**
     * Gets sortAsGiven
     *
     * @return bool|null
     */
    public function getSortAsGiven()
    {
        return $this->container['sortAsGiven'];
    }

    /**
     * Sets sortAsGiven
     *
     * @param bool|null $sortAsGiven Indicates if the listed entries sort as entered vs alphabetically.
     *
     * @return self
     */
    public function setSortAsGiven($sortAsGiven)
    {
        $this->container['sortAsGiven'] = $sortAsGiven;

        return $this;
    }

    /**
     * Gets carryChoices
     *
     * @return bool|null
     */
    public function getCarryChoices()
    {
        return $this->container['carryChoices'];
    }

    /**
     * Sets carryChoices
     *
     * @param bool|null $carryChoices Whether the field should carry its multiple choice fields when copied.
     *
     * @return self
     */
    public function setCarryChoices($carryChoices)
    {
        $this->container['carryChoices'] = $carryChoices;

        return $this;
    }

    /**
     * Gets foreignKey
     *
     * @return bool|null
     */
    public function getForeignKey()
    {
        return $this->container['foreignKey'];
    }

    /**
     * Sets foreignKey
     *
     * @param bool|null $foreignKey Indicates if the field is a foreign key (or reference field) in a relationship.
     *
     * @return self
     */
    public function setForeignKey($foreignKey)
    {
        $this->container['foreignKey'] = $foreignKey;

        return $this;
    }

    /**
     * Gets unique
     *
     * @return bool|null
     */
    public function getUnique()
    {
        return $this->container['unique'];
    }

    /**
     * Sets unique
     *
     * @param bool|null $unique Indicates if the field is marked unique.
     *
     * @return self
     */
    public function setUnique($unique)
    {
        $this->container['unique'] = $unique;

        return $this;
    }

    /**
     * Gets doesDataCopy
     *
     * @return bool|null
     */
    public function getDoesDataCopy()
    {
        return $this->container['doesDataCopy'];
    }

    /**
     * Sets doesDataCopy
     *
     * @param bool|null $doesDataCopy Indicates if the field data will copy when a user copies the record.
     *
     * @return self
     */
    public function setDoesDataCopy($doesDataCopy)
    {
        $this->container['doesDataCopy'] = $doesDataCopy;

        return $this;
    }

    /**
     * Gets fieldHelp
     *
     * @return string|null
     */
    public function getFieldHelp()
    {
        return $this->container['fieldHelp'];
    }

    /**
     * Sets fieldHelp
     *
     * @param string|null $fieldHelp The configured help text shown to users within the product.
     *
     * @return self
     */
    public function setFieldHelp($fieldHelp)
    {
        $this->container['fieldHelp'] = $fieldHelp;

        return $this;
    }

    /**
     * Gets audited
     *
     * @return bool|null
     */
    public function getAudited()
    {
        return $this->container['audited'];
    }

    /**
     * Sets audited
     *
     * @param bool|null $audited Indicates if the field is being tracked as part of Quick Base Audit Logs.
     *
     * @return self
     */
    public function setAudited($audited)
    {
        $this->container['audited'] = $audited;

        return $this;
    }

    /**
     * Gets numLines
     *
     * @return int|null
     */
    public function getNumLines()
    {
        return $this->container['numLines'];
    }

    /**
     * Sets numLines
     *
     * @param int|null $numLines The number of lines shown in the Quick Base product for this text field.
     *
     * @return self
     */
    public function setNumLines($numLines)
    {
        $this->container['numLines'] = $numLines;

        return $this;
    }

    /**
     * Gets maxLength
     *
     * @return int|null
     */
    public function getMaxLength()
    {
        return $this->container['maxLength'];
    }

    /**
     * Sets maxLength
     *
     * @param int|null $maxLength The maximum number of characters allowed for entry in the Quick Base product for this field.
     *
     * @return self
     */
    public function setMaxLength($maxLength)
    {
        $this->container['maxLength'] = $maxLength;

        return $this;
    }

    /**
     * Gets appendOnly
     *
     * @return bool|null
     */
    public function getAppendOnly()
    {
        return $this->container['appendOnly'];
    }

    /**
     * Sets appendOnly
     *
     * @param bool|null $appendOnly Whether this field is append only.
     *
     * @return self
     */
    public function setAppendOnly($appendOnly)
    {
        $this->container['appendOnly'] = $appendOnly;

        return $this;
    }

    /**
     * Gets allowHTML
     *
     * @return bool|null
     */
    public function getAllowHTML()
    {
        return $this->container['allowHTML'];
    }

    /**
     * Sets allowHTML
     *
     * @param bool|null $allowHTML Whether this field allows html.
     *
     * @return self
     */
    public function setAllowHTML($allowHTML)
    {
        $this->container['allowHTML'] = $allowHTML;

        return $this;
    }

    /**
     * Gets hasExtension
     *
     * @return bool|null
     */
    public function getHasExtension()
    {
        return $this->container['hasExtension'];
    }

    /**
     * Sets hasExtension
     *
     * @param bool|null $hasExtension Whether this field has a phone extension.
     *
     * @return self
     */
    public function setHasExtension($hasExtension)
    {
        $this->container['hasExtension'] = $hasExtension;

        return $this;
    }

    /**
     * Gets units
     *
     * @return string|null
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param string|null $units The units label.
     *
     * @return self
     */
    public function setUnits($units)
    {
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets decimalPlaces
     *
     * @return int|null
     */
    public function getDecimalPlaces()
    {
        return $this->container['decimalPlaces'];
    }

    /**
     * Sets decimalPlaces
     *
     * @param int|null $decimalPlaces The number of decimal places displayed in the product for this field.
     *
     * @return self
     */
    public function setDecimalPlaces($decimalPlaces)
    {
        $this->container['decimalPlaces'] = $decimalPlaces;

        return $this;
    }

    /**
     * Gets commaStart
     *
     * @return int|null
     */
    public function getCommaStart()
    {
        return $this->container['commaStart'];
    }

    /**
     * Sets commaStart
     *
     * @param int|null $commaStart The number of digits before commas display in the product, when applicable.
     *
     * @return self
     */
    public function setCommaStart($commaStart)
    {
        $this->container['commaStart'] = $commaStart;

        return $this;
    }

    /**
     * Gets numberFormat
     *
     * @return int|null
     */
    public function getNumberFormat()
    {
        return $this->container['numberFormat'];
    }

    /**
     * Sets numberFormat
     *
     * @param int|null $numberFormat The format used for displaying numeric values in the product (decimal, separators, digit group).
     *
     * @return self
     */
    public function setNumberFormat($numberFormat)
    {
        $this->container['numberFormat'] = $numberFormat;

        return $this;
    }

    /**
     * Gets doesAverage
     *
     * @return bool|null
     */
    public function getDoesAverage()
    {
        return $this->container['doesAverage'];
    }

    /**
     * Sets doesAverage
     *
     * @param bool|null $doesAverage Whether this field averages in reports within the product.
     *
     * @return self
     */
    public function setDoesAverage($doesAverage)
    {
        $this->container['doesAverage'] = $doesAverage;

        return $this;
    }

    /**
     * Gets doesTotal
     *
     * @return bool|null
     */
    public function getDoesTotal()
    {
        return $this->container['doesTotal'];
    }

    /**
     * Sets doesTotal
     *
     * @param bool|null $doesTotal Whether this field totals in reports within the product.
     *
     * @return self
     */
    public function setDoesTotal($doesTotal)
    {
        $this->container['doesTotal'] = $doesTotal;

        return $this;
    }

    /**
     * Gets blankIsZero
     *
     * @return bool|null
     */
    public function getBlankIsZero()
    {
        return $this->container['blankIsZero'];
    }

    /**
     * Sets blankIsZero
     *
     * @param bool|null $blankIsZero Whether a blank value is treated the same as 0 in calculations within the product.
     *
     * @return self
     */
    public function setBlankIsZero($blankIsZero)
    {
        $this->container['blankIsZero'] = $blankIsZero;

        return $this;
    }

    /**
     * Gets currencySymbol
     *
     * @return string|null
     */
    public function getCurrencySymbol()
    {
        return $this->container['currencySymbol'];
    }

    /**
     * Sets currencySymbol
     *
     * @param string|null $currencySymbol The current symbol used when displaying field values within the product.
     *
     * @return self
     */
    public function setCurrencySymbol($currencySymbol)
    {
        $this->container['currencySymbol'] = $currencySymbol;

        return $this;
    }

    /**
     * Gets currencyFormat
     *
     * @return string|null
     */
    public function getCurrencyFormat()
    {
        return $this->container['currencyFormat'];
    }

    /**
     * Sets currencyFormat
     *
     * @param string|null $currencyFormat The currency format used when displaying field values within the product.
     *
     * @return self
     */
    public function setCurrencyFormat($currencyFormat)
    {
        $this->container['currencyFormat'] = $currencyFormat;

        return $this;
    }

    /**
     * Gets displayTime
     *
     * @return bool|null
     */
    public function getDisplayTime()
    {
        return $this->container['displayTime'];
    }

    /**
     * Sets displayTime
     *
     * @param bool|null $displayTime Indicates whether to display the time, in addition to the date.
     *
     * @return self
     */
    public function setDisplayTime($displayTime)
    {
        $this->container['displayTime'] = $displayTime;

        return $this;
    }

    /**
     * Gets displayRelative
     *
     * @return bool|null
     */
    public function getDisplayRelative()
    {
        return $this->container['displayRelative'];
    }

    /**
     * Sets displayRelative
     *
     * @param bool|null $displayRelative Whether to display time as relative.
     *
     * @return self
     */
    public function setDisplayRelative($displayRelative)
    {
        $this->container['displayRelative'] = $displayRelative;

        return $this;
    }

    /**
     * Gets displayMonth
     *
     * @return string|null
     */
    public function getDisplayMonth()
    {
        return $this->container['displayMonth'];
    }

    /**
     * Sets displayMonth
     *
     * @param string|null $displayMonth How to display months.
     *
     * @return self
     */
    public function setDisplayMonth($displayMonth)
    {
        $this->container['displayMonth'] = $displayMonth;

        return $this;
    }

    /**
     * Gets defaultToday
     *
     * @return bool|null
     */
    public function getDefaultToday()
    {
        return $this->container['defaultToday'];
    }

    /**
     * Sets defaultToday
     *
     * @param bool|null $defaultToday Indicates if the field value is defaulted today for new records.
     *
     * @return self
     */
    public function setDefaultToday($defaultToday)
    {
        $this->container['defaultToday'] = $defaultToday;

        return $this;
    }

    /**
     * Gets displayDayOfWeek
     *
     * @return bool|null
     */
    public function getDisplayDayOfWeek()
    {
        return $this->container['displayDayOfWeek'];
    }

    /**
     * Sets displayDayOfWeek
     *
     * @param bool|null $displayDayOfWeek Indicates whether to display the day of the week within the product.
     *
     * @return self
     */
    public function setDisplayDayOfWeek($displayDayOfWeek)
    {
        $this->container['displayDayOfWeek'] = $displayDayOfWeek;

        return $this;
    }

    /**
     * Gets displayTimezone
     *
     * @return bool|null
     */
    public function getDisplayTimezone()
    {
        return $this->container['displayTimezone'];
    }

    /**
     * Sets displayTimezone
     *
     * @param bool|null $displayTimezone Indicates whether to display the timezone within the product.
     *
     * @return self
     */
    public function setDisplayTimezone($displayTimezone)
    {
        $this->container['displayTimezone'] = $displayTimezone;

        return $this;
    }

    /**
     * Gets workWeek
     *
     * @return int|null
     */
    public function getWorkWeek()
    {
        return $this->container['workWeek'];
    }

    /**
     * Sets workWeek
     *
     * @param int|null $workWeek The work week type.
     *
     * @return self
     */
    public function setWorkWeek($workWeek)
    {
        $this->container['workWeek'] = $workWeek;

        return $this;
    }

    /**
     * Gets startField
     *
     * @return int|null
     */
    public function getStartField()
    {
        return $this->container['startField'];
    }

    /**
     * Sets startField
     *
     * @param int|null $startField The start field id.
     *
     * @return self
     */
    public function setStartField($startField)
    {
        $this->container['startField'] = $startField;

        return $this;
    }

    /**
     * Gets durationField
     *
     * @return int|null
     */
    public function getDurationField()
    {
        return $this->container['durationField'];
    }

    /**
     * Sets durationField
     *
     * @param int|null $durationField The duration field id.
     *
     * @return self
     */
    public function setDurationField($durationField)
    {
        $this->container['durationField'] = $durationField;

        return $this;
    }

    /**
     * Gets format
     *
     * @return int|null
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param int|null $format The format to display time.
     *
     * @return self
     */
    public function setFormat($format)
    {
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets hours24
     *
     * @return bool|null
     */
    public function getHours24()
    {
        return $this->container['hours24'];
    }

    /**
     * Sets hours24
     *
     * @param bool|null $hours24 Indicates whether or not to display time in the 24-hour format within the product.
     *
     * @return self
     */
    public function setHours24($hours24)
    {
        $this->container['hours24'] = $hours24;

        return $this;
    }

    /**
     * Gets displayUser
     *
     * @return string|null
     */
    public function getDisplayUser()
    {
        return $this->container['displayUser'];
    }

    /**
     * Sets displayUser
     *
     * @param string|null $displayUser The configured option for how users display within the product.
     *
     * @return self
     */
    public function setDisplayUser($displayUser)
    {
        $this->container['displayUser'] = $displayUser;

        return $this;
    }

    /**
     * Gets defaultKind
     *
     * @return string|null
     */
    public function getDefaultKind()
    {
        return $this->container['defaultKind'];
    }

    /**
     * Sets defaultKind
     *
     * @param string|null $defaultKind The user default type.
     *
     * @return self
     */
    public function setDefaultKind($defaultKind)
    {
        $this->container['defaultKind'] = $defaultKind;

        return $this;
    }

    /**
     * Gets defaultValueLuid
     *
     * @return int|null
     */
    public function getDefaultValueLuid()
    {
        return $this->container['defaultValueLuid'];
    }

    /**
     * Sets defaultValueLuid
     *
     * @param int|null $defaultValueLuid Default user id value.
     *
     * @return self
     */
    public function setDefaultValueLuid($defaultValueLuid)
    {
        $this->container['defaultValueLuid'] = $defaultValueLuid;

        return $this;
    }

    /**
     * Gets choicesLuid
     *
     * @return string[]|null
     */
    public function getChoicesLuid()
    {
        return $this->container['choicesLuid'];
    }

    /**
     * Sets choicesLuid
     *
     * @param string[]|null $choicesLuid List of user choices.
     *
     * @return self
     */
    public function setChoicesLuid($choicesLuid)
    {
        $this->container['choicesLuid'] = $choicesLuid;

        return $this;
    }

    /**
     * Gets choices
     *
     * @return string[]|null
     */
    public function getChoices()
    {
        return $this->container['choices'];
    }

    /**
     * Sets choices
     *
     * @param string[]|null $choices An array of entries that exist for a field that offers choices to the user.
     *
     * @return self
     */
    public function setChoices($choices)
    {
        $this->container['choices'] = $choices;

        return $this;
    }

    /**
     * Gets compositeFields
     *
     * @return string[]|null
     */
    public function getCompositeFields()
    {
        return $this->container['compositeFields'];
    }

    /**
     * Sets compositeFields
     *
     * @param string[]|null $compositeFields An array of the fields that make up a composite field (e.g., address).
     *
     * @return self
     */
    public function setCompositeFields($compositeFields)
    {
        $this->container['compositeFields'] = $compositeFields;

        return $this;
    }

    /**
     * Gets targetTableId
     *
     * @return string|null
     */
    public function getTargetTableId()
    {
        return $this->container['targetTableId'];
    }

    /**
     * Sets targetTableId
     *
     * @param string|null $targetTableId The id of the target table.
     *
     * @return self
     */
    public function setTargetTableId($targetTableId)
    {
        $this->container['targetTableId'] = $targetTableId;

        return $this;
    }

    /**
     * Gets targetFieldId
     *
     * @return int|null
     */
    public function getTargetFieldId()
    {
        return $this->container['targetFieldId'];
    }

    /**
     * Sets targetFieldId
     *
     * @param int|null $targetFieldId The id of the target field.
     *
     * @return self
     */
    public function setTargetFieldId($targetFieldId)
    {
        $this->container['targetFieldId'] = $targetFieldId;

        return $this;
    }

    /**
     * Gets sourceFieldId
     *
     * @return int|null
     */
    public function getSourceFieldId()
    {
        return $this->container['sourceFieldId'];
    }

    /**
     * Sets sourceFieldId
     *
     * @param int|null $sourceFieldId The id of the source field.
     *
     * @return self
     */
    public function setSourceFieldId($sourceFieldId)
    {
        $this->container['sourceFieldId'] = $sourceFieldId;

        return $this;
    }

    /**
     * Gets useNewWindow
     *
     * @return bool|null
     */
    public function getUseNewWindow()
    {
        return $this->container['useNewWindow'];
    }

    /**
     * Sets useNewWindow
     *
     * @param bool|null $useNewWindow Indicates if the URL should open a new window when a user clicks it within the product.
     *
     * @return self
     */
    public function setUseNewWindow($useNewWindow)
    {
        $this->container['useNewWindow'] = $useNewWindow;

        return $this;
    }

    /**
     * Gets linkText
     *
     * @return string|null
     */
    public function getLinkText()
    {
        return $this->container['linkText'];
    }

    /**
     * Sets linkText
     *
     * @param string|null $linkText The configured text value that replaces the URL that users see within the product.
     *
     * @return self
     */
    public function setLinkText($linkText)
    {
        $this->container['linkText'] = $linkText;

        return $this;
    }

    /**
     * Gets exact
     *
     * @return bool|null
     */
    public function getExact()
    {
        return $this->container['exact'];
    }

    /**
     * Sets exact
     *
     * @param bool|null $exact Whether an exact match is required for a report link.
     *
     * @return self
     */
    public function setExact($exact)
    {
        $this->container['exact'] = $exact;

        return $this;
    }

    /**
     * Gets displayImages
     *
     * @return bool|null
     */
    public function getDisplayImages()
    {
        return $this->container['displayImages'];
    }

    /**
     * Sets displayImages
     *
     * @param bool|null $displayImages Indicates whether images will display for file attachments on forms and reports within the product.
     *
     * @return self
     */
    public function setDisplayImages($displayImages)
    {
        $this->container['displayImages'] = $displayImages;

        return $this;
    }

    /**
     * Gets defaultDomain
     *
     * @return string|null
     */
    public function getDefaultDomain()
    {
        return $this->container['defaultDomain'];
    }

    /**
     * Sets defaultDomain
     *
     * @param string|null $defaultDomain Default email domain.
     *
     * @return self
     */
    public function setDefaultDomain($defaultDomain)
    {
        $this->container['defaultDomain'] = $defaultDomain;

        return $this;
    }

    /**
     * Gets displayEmail
     *
     * @return string|null
     */
    public function getDisplayEmail()
    {
        return $this->container['displayEmail'];
    }

    /**
     * Sets displayEmail
     *
     * @param string|null $displayEmail How the email is displayed.
     *
     * @return self
     */
    public function setDisplayEmail($displayEmail)
    {
        $this->container['displayEmail'] = $displayEmail;

        return $this;
    }

    /**
     * Gets appearsAs
     *
     * @return string|null
     */
    public function getAppearsAs()
    {
        return $this->container['appearsAs'];
    }

    /**
     * Sets appearsAs
     *
     * @param string|null $appearsAs The link text, if empty, the url will be used as link text.
     *
     * @return self
     */
    public function setAppearsAs($appearsAs)
    {
        $this->container['appearsAs'] = $appearsAs;

        return $this;
    }

    /**
     * Gets abbreviate
     *
     * @return bool|null
     */
    public function getAbbreviate()
    {
        return $this->container['abbreviate'];
    }

    /**
     * Sets abbreviate
     *
     * @param bool|null $abbreviate Don't show the URL protocol when showing the URL.
     *
     * @return self
     */
    public function setAbbreviate($abbreviate)
    {
        $this->container['abbreviate'] = $abbreviate;

        return $this;
    }

    /**
     * Gets autoSave
     *
     * @return bool|null
     */
    public function getAutoSave()
    {
        return $this->container['autoSave'];
    }

    /**
     * Sets autoSave
     *
     * @param bool|null $autoSave Whether the link field will auto save.
     *
     * @return self
     */
    public function setAutoSave($autoSave)
    {
        $this->container['autoSave'] = $autoSave;

        return $this;
    }

    /**
     * Gets targetTableName
     *
     * @return string|null
     */
    public function getTargetTableName()
    {
        return $this->container['targetTableName'];
    }

    /**
     * Sets targetTableName
     *
     * @param string|null $targetTableName The field's target table name.
     *
     * @return self
     */
    public function setTargetTableName($targetTableName)
    {
        $this->container['targetTableName'] = $targetTableName;

        return $this;
    }

    /**
     * Gets displayAsLink
     *
     * @return bool|null
     */
    public function getDisplayAsLink()
    {
        return $this->container['displayAsLink'];
    }

    /**
     * Sets displayAsLink
     *
     * @param bool|null $displayAsLink Indicates if a field that is part of the relationship should be shown as a hyperlink to the parent record within the product.
     *
     * @return self
     */
    public function setDisplayAsLink($displayAsLink)
    {
        $this->container['displayAsLink'] = $displayAsLink;

        return $this;
    }

    /**
     * Gets sortAlpha
     *
     * @return bool|null
     */
    public function getSortAlpha()
    {
        return $this->container['sortAlpha'];
    }

    /**
     * Sets sortAlpha
     *
     * @param bool|null $sortAlpha Whether to sort alphabetically, default sort is by record ID.
     *
     * @return self
     */
    public function setSortAlpha($sortAlpha)
    {
        $this->container['sortAlpha'] = $sortAlpha;

        return $this;
    }

    /**
     * Gets coverText
     *
     * @return string|null
     */
    public function getCoverText()
    {
        return $this->container['coverText'];
    }

    /**
     * Sets coverText
     *
     * @param string|null $coverText An alternate user friendly text that can be used to display a link in the browser.
     *
     * @return self
     */
    public function setCoverText($coverText)
    {
        $this->container['coverText'] = $coverText;

        return $this;
    }

    /**
     * Gets versionMode
     *
     * @return string|null
     */
    public function getVersionMode()
    {
        return $this->container['versionMode'];
    }

    /**
     * Sets versionMode
     *
     * @param string|null $versionMode Version modes for files. Keep all versions vs keep last version.
     *
     * @return self
     */
    public function setVersionMode($versionMode)
    {
        $allowedValues = $this->getVersionModeAllowableValues();
        if (!is_null($versionMode) && !in_array($versionMode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'versionMode', must be one of '%s'",
                    $versionMode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['versionMode'] = $versionMode;

        return $this;
    }

    /**
     * Gets maxVersions
     *
     * @return int|null
     */
    public function getMaxVersions()
    {
        return $this->container['maxVersions'];
    }

    /**
     * Sets maxVersions
     *
     * @param int|null $maxVersions The maximum number of versions configured for a file attachment.
     *
     * @return self
     */
    public function setMaxVersions($maxVersions)
    {
        $this->container['maxVersions'] = $maxVersions;

        return $this;
    }

    /**
     * Gets seeVersions
     *
     * @return bool|null
     */
    public function getSeeVersions()
    {
        return $this->container['seeVersions'];
    }

    /**
     * Sets seeVersions
     *
     * @param bool|null $seeVersions Indicates if the user can see other versions, aside from the most recent, of a file attachment within the product.
     *
     * @return self
     */
    public function setSeeVersions($seeVersions)
    {
        $this->container['seeVersions'] = $seeVersions;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int|null $width The field's html input width in the product.
     *
     * @return self
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets xmlTag
     *
     * @return string|null
     */
    public function getXmlTag()
    {
        return $this->container['xmlTag'];
    }

    /**
     * Sets xmlTag
     *
     * @param string|null $xmlTag The field's xml tag.
     *
     * @return self
     */
    public function setXmlTag($xmlTag)
    {
        $this->container['xmlTag'] = $xmlTag;

        return $this;
    }

    /**
     * Gets formula
     *
     * @return string|null
     */
    public function getFormula()
    {
        return $this->container['formula'];
    }

    /**
     * Sets formula
     *
     * @param string|null $formula The formula of the field as configured in Quick Base.
     *
     * @return self
     */
    public function setFormula($formula)
    {
        $this->container['formula'] = $formula;

        return $this;
    }

    /**
     * Gets defaultValue
     *
     * @return string|null
     */
    public function getDefaultValue()
    {
        return $this->container['defaultValue'];
    }

    /**
     * Sets defaultValue
     *
     * @param string|null $defaultValue The default value configured for a field when a new record is added.
     *
     * @return self
     */
    public function setDefaultValue($defaultValue)
    {
        $this->container['defaultValue'] = $defaultValue;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments The comments entered on the field properties by an administrator.
     *
     * @return self
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets masterChoiceTableId
     *
     * @return int|null
     */
    public function getMasterChoiceTableId()
    {
        return $this->container['masterChoiceTableId'];
    }

    /**
     * Sets masterChoiceTableId
     *
     * @param int|null $masterChoiceTableId The id of the table that is the master in this relationship.
     *
     * @return self
     */
    public function setMasterChoiceTableId($masterChoiceTableId)
    {
        $this->container['masterChoiceTableId'] = $masterChoiceTableId;

        return $this;
    }

    /**
     * Gets masterChoiceFieldId
     *
     * @return int|null
     */
    public function getMasterChoiceFieldId()
    {
        return $this->container['masterChoiceFieldId'];
    }

    /**
     * Sets masterChoiceFieldId
     *
     * @param int|null $masterChoiceFieldId The id of the field that is the reference in the relationship.
     *
     * @return self
     */
    public function setMasterChoiceFieldId($masterChoiceFieldId)
    {
        $this->container['masterChoiceFieldId'] = $masterChoiceFieldId;

        return $this;
    }

    /**
     * Gets snapFieldId
     *
     * @return int|null
     */
    public function getSnapFieldId()
    {
        return $this->container['snapFieldId'];
    }

    /**
     * Sets snapFieldId
     *
     * @param int|null $snapFieldId The id of the field that is used to snapshot values from, when applicable.
     *
     * @return self
     */
    public function setSnapFieldId($snapFieldId)
    {
        $this->container['snapFieldId'] = $snapFieldId;

        return $this;
    }

    /**
     * Gets parentFieldId
     *
     * @return int|null
     */
    public function getParentFieldId()
    {
        return $this->container['parentFieldId'];
    }

    /**
     * Sets parentFieldId
     *
     * @param int|null $parentFieldId The id of the parent composite field, when applicable.
     *
     * @return self
     */
    public function setParentFieldId($parentFieldId)
    {
        $this->container['parentFieldId'] = $parentFieldId;

        return $this;
    }

    /**
     * Gets lookupTargetFieldId
     *
     * @return int|null
     */
    public function getLookupTargetFieldId()
    {
        return $this->container['lookupTargetFieldId'];
    }

    /**
     * Sets lookupTargetFieldId
     *
     * @param int|null $lookupTargetFieldId The id of the field that is the target on the master table for this lookup.
     *
     * @return self
     */
    public function setLookupTargetFieldId($lookupTargetFieldId)
    {
        $this->container['lookupTargetFieldId'] = $lookupTargetFieldId;

        return $this;
    }

    /**
     * Gets lookupReferenceFieldId
     *
     * @return int|null
     */
    public function getLookupReferenceFieldId()
    {
        return $this->container['lookupReferenceFieldId'];
    }

    /**
     * Sets lookupReferenceFieldId
     *
     * @param int|null $lookupReferenceFieldId The id of the field that is the reference in the relationship for this lookup.
     *
     * @return self
     */
    public function setLookupReferenceFieldId($lookupReferenceFieldId)
    {
        $this->container['lookupReferenceFieldId'] = $lookupReferenceFieldId;

        return $this;
    }

    /**
     * Gets summaryReferenceFieldId
     *
     * @return int|null
     */
    public function getSummaryReferenceFieldId()
    {
        return $this->container['summaryReferenceFieldId'];
    }

    /**
     * Sets summaryReferenceFieldId
     *
     * @param int|null $summaryReferenceFieldId The id of the field that is the reference in the relationship for this summary.
     *
     * @return self
     */
    public function setSummaryReferenceFieldId($summaryReferenceFieldId)
    {
        $this->container['summaryReferenceFieldId'] = $summaryReferenceFieldId;

        return $this;
    }

    /**
     * Gets summaryTargetFieldId
     *
     * @return int|null
     */
    public function getSummaryTargetFieldId()
    {
        return $this->container['summaryTargetFieldId'];
    }

    /**
     * Sets summaryTargetFieldId
     *
     * @param int|null $summaryTargetFieldId The id of the field that is used to aggregate values from the child, when applicable. This displays 0 if the summary function doesn’t require a field selection (like count).
     *
     * @return self
     */
    public function setSummaryTargetFieldId($summaryTargetFieldId)
    {
        $this->container['summaryTargetFieldId'] = $summaryTargetFieldId;

        return $this;
    }

    /**
     * Gets summaryFunction
     *
     * @return string|null
     */
    public function getSummaryFunction()
    {
        return $this->container['summaryFunction'];
    }

    /**
     * Sets summaryFunction
     *
     * @param string|null $summaryFunction The summary accumulation function type.
     *
     * @return self
     */
    public function setSummaryFunction($summaryFunction)
    {
        $allowedValues = $this->getSummaryFunctionAllowableValues();
        if (!is_null($summaryFunction) && !in_array($summaryFunction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'summaryFunction', must be one of '%s'",
                    $summaryFunction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['summaryFunction'] = $summaryFunction;

        return $this;
    }

    /**
     * Gets masterTableTag
     *
     * @return string|null
     */
    public function getMasterTableTag()
    {
        return $this->container['masterTableTag'];
    }

    /**
     * Sets masterTableTag
     *
     * @param string|null $masterTableTag The table alias for the master table in the relationship this field is part of.
     *
     * @return self
     */
    public function setMasterTableTag($masterTableTag)
    {
        $this->container['masterTableTag'] = $masterTableTag;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return \Rossity\PhpQuickbase\Model\FieldsPermissions[]|null
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param \Rossity\PhpQuickbase\Model\FieldsPermissions[]|null $permissions Field Permissions for different roles.
     *
     * @return self
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


