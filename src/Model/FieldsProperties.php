<?php
/**
 * FieldsProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  Rossity\PhpQuickbase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Quick Base API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Rossity\PhpQuickbase\Model;

use \ArrayAccess;
use \Rossity\PhpQuickbase\ObjectSerializer;

/**
 * FieldsProperties Class Doc Comment
 *
 * @category Class
 * @description Specific field properties.
 * @package  Rossity\PhpQuickbase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FieldsProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_fields_properties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'comments' => 'string',
        'doesTotal' => 'bool',
        'autoSave' => 'bool',
        'defaultValueLuid' => 'int',
        'maxVersions' => 'int',
        'format' => 'int',
        'carryChoices' => 'bool',
        'maxLength' => 'int',
        'linkText' => 'string',
        'parentFieldId' => 'int',
        'displayTimezone' => 'bool',
        'allowNewChoices' => 'bool',
        'defaultToday' => 'bool',
        'units' => 'string',
        'sourceFieldId' => 'int',
        'doesAverage' => 'bool',
        'formula' => 'string',
        'decimalPlaces' => 'int',
        'displayMonth' => 'string',
        'seeVersions' => 'bool',
        'numLines' => 'int',
        'defaultKind' => 'string',
        'displayEmail' => 'string',
        'currencySymbol' => 'string',
        'targetFieldId' => 'int',
        'displayUser' => 'string',
        'blankIsZero' => 'bool',
        'exact' => 'bool',
        'defaultDomain' => 'string',
        'defaultValue' => 'string',
        'abbreviate' => 'bool',
        'numberFormat' => 'int',
        'targetTableName' => 'string',
        'appearsAs' => 'string',
        'width' => 'int',
        'currencyFormat' => 'string',
        'displayImages' => 'bool',
        'displayDayOfWeek' => 'bool',
        'commaStart' => 'int',
        'choices' => 'string[]',
        'targetTableId' => 'string',
        'displayRelative' => 'bool',
        'compositeFields' => 'string[]',
        'displayTime' => 'bool',
        'versionMode' => 'int',
        'snapFieldId' => 'int',
        'hours24' => 'bool',
        'sortAlpha' => 'bool',
        'sortAsGiven' => 'bool',
        'hasExtension' => 'bool',
        'useNewWindow' => 'bool',
        'appendOnly' => 'bool',
        'displayAsLink' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'comments' => null,
        'doesTotal' => null,
        'autoSave' => null,
        'defaultValueLuid' => null,
        'maxVersions' => null,
        'format' => null,
        'carryChoices' => null,
        'maxLength' => null,
        'linkText' => null,
        'parentFieldId' => null,
        'displayTimezone' => null,
        'allowNewChoices' => null,
        'defaultToday' => null,
        'units' => null,
        'sourceFieldId' => null,
        'doesAverage' => null,
        'formula' => null,
        'decimalPlaces' => null,
        'displayMonth' => null,
        'seeVersions' => null,
        'numLines' => null,
        'defaultKind' => null,
        'displayEmail' => null,
        'currencySymbol' => null,
        'targetFieldId' => null,
        'displayUser' => null,
        'blankIsZero' => null,
        'exact' => null,
        'defaultDomain' => null,
        'defaultValue' => null,
        'abbreviate' => null,
        'numberFormat' => null,
        'targetTableName' => null,
        'appearsAs' => null,
        'width' => null,
        'currencyFormat' => null,
        'displayImages' => null,
        'displayDayOfWeek' => null,
        'commaStart' => null,
        'choices' => null,
        'targetTableId' => null,
        'displayRelative' => null,
        'compositeFields' => null,
        'displayTime' => null,
        'versionMode' => null,
        'snapFieldId' => null,
        'hours24' => null,
        'sortAlpha' => null,
        'sortAsGiven' => null,
        'hasExtension' => null,
        'useNewWindow' => null,
        'appendOnly' => null,
        'displayAsLink' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'comments' => 'comments',
        'doesTotal' => 'doesTotal',
        'autoSave' => 'autoSave',
        'defaultValueLuid' => 'defaultValueLuid',
        'maxVersions' => 'maxVersions',
        'format' => 'format',
        'carryChoices' => 'carryChoices',
        'maxLength' => 'maxLength',
        'linkText' => 'linkText',
        'parentFieldId' => 'parentFieldId',
        'displayTimezone' => 'displayTimezone',
        'allowNewChoices' => 'allowNewChoices',
        'defaultToday' => 'defaultToday',
        'units' => 'units',
        'sourceFieldId' => 'sourceFieldId',
        'doesAverage' => 'doesAverage',
        'formula' => 'formula',
        'decimalPlaces' => 'decimalPlaces',
        'displayMonth' => 'displayMonth',
        'seeVersions' => 'seeVersions',
        'numLines' => 'numLines',
        'defaultKind' => 'defaultKind',
        'displayEmail' => 'displayEmail',
        'currencySymbol' => 'currencySymbol',
        'targetFieldId' => 'targetFieldId',
        'displayUser' => 'displayUser',
        'blankIsZero' => 'blankIsZero',
        'exact' => 'exact',
        'defaultDomain' => 'defaultDomain',
        'defaultValue' => 'defaultValue',
        'abbreviate' => 'abbreviate',
        'numberFormat' => 'numberFormat',
        'targetTableName' => 'targetTableName',
        'appearsAs' => 'appearsAs',
        'width' => 'width',
        'currencyFormat' => 'currencyFormat',
        'displayImages' => 'displayImages',
        'displayDayOfWeek' => 'displayDayOfWeek',
        'commaStart' => 'commaStart',
        'choices' => 'choices',
        'targetTableId' => 'targetTableId',
        'displayRelative' => 'displayRelative',
        'compositeFields' => 'compositeFields',
        'displayTime' => 'displayTime',
        'versionMode' => 'versionMode',
        'snapFieldId' => 'snapFieldId',
        'hours24' => 'hours24',
        'sortAlpha' => 'sortAlpha',
        'sortAsGiven' => 'sortAsGiven',
        'hasExtension' => 'hasExtension',
        'useNewWindow' => 'useNewWindow',
        'appendOnly' => 'appendOnly',
        'displayAsLink' => 'displayAsLink'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'comments' => 'setComments',
        'doesTotal' => 'setDoesTotal',
        'autoSave' => 'setAutoSave',
        'defaultValueLuid' => 'setDefaultValueLuid',
        'maxVersions' => 'setMaxVersions',
        'format' => 'setFormat',
        'carryChoices' => 'setCarryChoices',
        'maxLength' => 'setMaxLength',
        'linkText' => 'setLinkText',
        'parentFieldId' => 'setParentFieldId',
        'displayTimezone' => 'setDisplayTimezone',
        'allowNewChoices' => 'setAllowNewChoices',
        'defaultToday' => 'setDefaultToday',
        'units' => 'setUnits',
        'sourceFieldId' => 'setSourceFieldId',
        'doesAverage' => 'setDoesAverage',
        'formula' => 'setFormula',
        'decimalPlaces' => 'setDecimalPlaces',
        'displayMonth' => 'setDisplayMonth',
        'seeVersions' => 'setSeeVersions',
        'numLines' => 'setNumLines',
        'defaultKind' => 'setDefaultKind',
        'displayEmail' => 'setDisplayEmail',
        'currencySymbol' => 'setCurrencySymbol',
        'targetFieldId' => 'setTargetFieldId',
        'displayUser' => 'setDisplayUser',
        'blankIsZero' => 'setBlankIsZero',
        'exact' => 'setExact',
        'defaultDomain' => 'setDefaultDomain',
        'defaultValue' => 'setDefaultValue',
        'abbreviate' => 'setAbbreviate',
        'numberFormat' => 'setNumberFormat',
        'targetTableName' => 'setTargetTableName',
        'appearsAs' => 'setAppearsAs',
        'width' => 'setWidth',
        'currencyFormat' => 'setCurrencyFormat',
        'displayImages' => 'setDisplayImages',
        'displayDayOfWeek' => 'setDisplayDayOfWeek',
        'commaStart' => 'setCommaStart',
        'choices' => 'setChoices',
        'targetTableId' => 'setTargetTableId',
        'displayRelative' => 'setDisplayRelative',
        'compositeFields' => 'setCompositeFields',
        'displayTime' => 'setDisplayTime',
        'versionMode' => 'setVersionMode',
        'snapFieldId' => 'setSnapFieldId',
        'hours24' => 'setHours24',
        'sortAlpha' => 'setSortAlpha',
        'sortAsGiven' => 'setSortAsGiven',
        'hasExtension' => 'setHasExtension',
        'useNewWindow' => 'setUseNewWindow',
        'appendOnly' => 'setAppendOnly',
        'displayAsLink' => 'setDisplayAsLink'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'comments' => 'getComments',
        'doesTotal' => 'getDoesTotal',
        'autoSave' => 'getAutoSave',
        'defaultValueLuid' => 'getDefaultValueLuid',
        'maxVersions' => 'getMaxVersions',
        'format' => 'getFormat',
        'carryChoices' => 'getCarryChoices',
        'maxLength' => 'getMaxLength',
        'linkText' => 'getLinkText',
        'parentFieldId' => 'getParentFieldId',
        'displayTimezone' => 'getDisplayTimezone',
        'allowNewChoices' => 'getAllowNewChoices',
        'defaultToday' => 'getDefaultToday',
        'units' => 'getUnits',
        'sourceFieldId' => 'getSourceFieldId',
        'doesAverage' => 'getDoesAverage',
        'formula' => 'getFormula',
        'decimalPlaces' => 'getDecimalPlaces',
        'displayMonth' => 'getDisplayMonth',
        'seeVersions' => 'getSeeVersions',
        'numLines' => 'getNumLines',
        'defaultKind' => 'getDefaultKind',
        'displayEmail' => 'getDisplayEmail',
        'currencySymbol' => 'getCurrencySymbol',
        'targetFieldId' => 'getTargetFieldId',
        'displayUser' => 'getDisplayUser',
        'blankIsZero' => 'getBlankIsZero',
        'exact' => 'getExact',
        'defaultDomain' => 'getDefaultDomain',
        'defaultValue' => 'getDefaultValue',
        'abbreviate' => 'getAbbreviate',
        'numberFormat' => 'getNumberFormat',
        'targetTableName' => 'getTargetTableName',
        'appearsAs' => 'getAppearsAs',
        'width' => 'getWidth',
        'currencyFormat' => 'getCurrencyFormat',
        'displayImages' => 'getDisplayImages',
        'displayDayOfWeek' => 'getDisplayDayOfWeek',
        'commaStart' => 'getCommaStart',
        'choices' => 'getChoices',
        'targetTableId' => 'getTargetTableId',
        'displayRelative' => 'getDisplayRelative',
        'compositeFields' => 'getCompositeFields',
        'displayTime' => 'getDisplayTime',
        'versionMode' => 'getVersionMode',
        'snapFieldId' => 'getSnapFieldId',
        'hours24' => 'getHours24',
        'sortAlpha' => 'getSortAlpha',
        'sortAsGiven' => 'getSortAsGiven',
        'hasExtension' => 'getHasExtension',
        'useNewWindow' => 'getUseNewWindow',
        'appendOnly' => 'getAppendOnly',
        'displayAsLink' => 'getDisplayAsLink'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['doesTotal'] = isset($data['doesTotal']) ? $data['doesTotal'] : null;
        $this->container['autoSave'] = isset($data['autoSave']) ? $data['autoSave'] : null;
        $this->container['defaultValueLuid'] = isset($data['defaultValueLuid']) ? $data['defaultValueLuid'] : null;
        $this->container['maxVersions'] = isset($data['maxVersions']) ? $data['maxVersions'] : null;
        $this->container['format'] = isset($data['format']) ? $data['format'] : null;
        $this->container['carryChoices'] = isset($data['carryChoices']) ? $data['carryChoices'] : null;
        $this->container['maxLength'] = isset($data['maxLength']) ? $data['maxLength'] : null;
        $this->container['linkText'] = isset($data['linkText']) ? $data['linkText'] : null;
        $this->container['parentFieldId'] = isset($data['parentFieldId']) ? $data['parentFieldId'] : null;
        $this->container['displayTimezone'] = isset($data['displayTimezone']) ? $data['displayTimezone'] : null;
        $this->container['allowNewChoices'] = isset($data['allowNewChoices']) ? $data['allowNewChoices'] : null;
        $this->container['defaultToday'] = isset($data['defaultToday']) ? $data['defaultToday'] : null;
        $this->container['units'] = isset($data['units']) ? $data['units'] : null;
        $this->container['sourceFieldId'] = isset($data['sourceFieldId']) ? $data['sourceFieldId'] : null;
        $this->container['doesAverage'] = isset($data['doesAverage']) ? $data['doesAverage'] : null;
        $this->container['formula'] = isset($data['formula']) ? $data['formula'] : null;
        $this->container['decimalPlaces'] = isset($data['decimalPlaces']) ? $data['decimalPlaces'] : null;
        $this->container['displayMonth'] = isset($data['displayMonth']) ? $data['displayMonth'] : null;
        $this->container['seeVersions'] = isset($data['seeVersions']) ? $data['seeVersions'] : null;
        $this->container['numLines'] = isset($data['numLines']) ? $data['numLines'] : null;
        $this->container['defaultKind'] = isset($data['defaultKind']) ? $data['defaultKind'] : null;
        $this->container['displayEmail'] = isset($data['displayEmail']) ? $data['displayEmail'] : null;
        $this->container['currencySymbol'] = isset($data['currencySymbol']) ? $data['currencySymbol'] : null;
        $this->container['targetFieldId'] = isset($data['targetFieldId']) ? $data['targetFieldId'] : null;
        $this->container['displayUser'] = isset($data['displayUser']) ? $data['displayUser'] : null;
        $this->container['blankIsZero'] = isset($data['blankIsZero']) ? $data['blankIsZero'] : null;
        $this->container['exact'] = isset($data['exact']) ? $data['exact'] : null;
        $this->container['defaultDomain'] = isset($data['defaultDomain']) ? $data['defaultDomain'] : null;
        $this->container['defaultValue'] = isset($data['defaultValue']) ? $data['defaultValue'] : null;
        $this->container['abbreviate'] = isset($data['abbreviate']) ? $data['abbreviate'] : null;
        $this->container['numberFormat'] = isset($data['numberFormat']) ? $data['numberFormat'] : null;
        $this->container['targetTableName'] = isset($data['targetTableName']) ? $data['targetTableName'] : null;
        $this->container['appearsAs'] = isset($data['appearsAs']) ? $data['appearsAs'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['currencyFormat'] = isset($data['currencyFormat']) ? $data['currencyFormat'] : null;
        $this->container['displayImages'] = isset($data['displayImages']) ? $data['displayImages'] : null;
        $this->container['displayDayOfWeek'] = isset($data['displayDayOfWeek']) ? $data['displayDayOfWeek'] : null;
        $this->container['commaStart'] = isset($data['commaStart']) ? $data['commaStart'] : null;
        $this->container['choices'] = isset($data['choices']) ? $data['choices'] : null;
        $this->container['targetTableId'] = isset($data['targetTableId']) ? $data['targetTableId'] : null;
        $this->container['displayRelative'] = isset($data['displayRelative']) ? $data['displayRelative'] : null;
        $this->container['compositeFields'] = isset($data['compositeFields']) ? $data['compositeFields'] : null;
        $this->container['displayTime'] = isset($data['displayTime']) ? $data['displayTime'] : null;
        $this->container['versionMode'] = isset($data['versionMode']) ? $data['versionMode'] : null;
        $this->container['snapFieldId'] = isset($data['snapFieldId']) ? $data['snapFieldId'] : null;
        $this->container['hours24'] = isset($data['hours24']) ? $data['hours24'] : null;
        $this->container['sortAlpha'] = isset($data['sortAlpha']) ? $data['sortAlpha'] : null;
        $this->container['sortAsGiven'] = isset($data['sortAsGiven']) ? $data['sortAsGiven'] : null;
        $this->container['hasExtension'] = isset($data['hasExtension']) ? $data['hasExtension'] : null;
        $this->container['useNewWindow'] = isset($data['useNewWindow']) ? $data['useNewWindow'] : null;
        $this->container['appendOnly'] = isset($data['appendOnly']) ? $data['appendOnly'] : null;
        $this->container['displayAsLink'] = isset($data['displayAsLink']) ? $data['displayAsLink'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments The comments entered on the field properties by an administrator.
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets doesTotal
     *
     * @return bool|null
     */
    public function getDoesTotal()
    {
        return $this->container['doesTotal'];
    }

    /**
     * Sets doesTotal
     *
     * @param bool|null $doesTotal Whether this field totals in reports within the product.
     *
     * @return $this
     */
    public function setDoesTotal($doesTotal)
    {
        $this->container['doesTotal'] = $doesTotal;

        return $this;
    }

    /**
     * Gets autoSave
     *
     * @return bool|null
     */
    public function getAutoSave()
    {
        return $this->container['autoSave'];
    }

    /**
     * Sets autoSave
     *
     * @param bool|null $autoSave Whether the link field will auto save.
     *
     * @return $this
     */
    public function setAutoSave($autoSave)
    {
        $this->container['autoSave'] = $autoSave;

        return $this;
    }

    /**
     * Gets defaultValueLuid
     *
     * @return int|null
     */
    public function getDefaultValueLuid()
    {
        return $this->container['defaultValueLuid'];
    }

    /**
     * Sets defaultValueLuid
     *
     * @param int|null $defaultValueLuid Default user id value.
     *
     * @return $this
     */
    public function setDefaultValueLuid($defaultValueLuid)
    {
        $this->container['defaultValueLuid'] = $defaultValueLuid;

        return $this;
    }

    /**
     * Gets maxVersions
     *
     * @return int|null
     */
    public function getMaxVersions()
    {
        return $this->container['maxVersions'];
    }

    /**
     * Sets maxVersions
     *
     * @param int|null $maxVersions The maximum number of versions configured for a file attachment.
     *
     * @return $this
     */
    public function setMaxVersions($maxVersions)
    {
        $this->container['maxVersions'] = $maxVersions;

        return $this;
    }

    /**
     * Gets format
     *
     * @return int|null
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param int|null $format The format to display time.
     *
     * @return $this
     */
    public function setFormat($format)
    {
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets carryChoices
     *
     * @return bool|null
     */
    public function getCarryChoices()
    {
        return $this->container['carryChoices'];
    }

    /**
     * Sets carryChoices
     *
     * @param bool|null $carryChoices Whether the field should carry its multiple choice fields when copied.
     *
     * @return $this
     */
    public function setCarryChoices($carryChoices)
    {
        $this->container['carryChoices'] = $carryChoices;

        return $this;
    }

    /**
     * Gets maxLength
     *
     * @return int|null
     */
    public function getMaxLength()
    {
        return $this->container['maxLength'];
    }

    /**
     * Sets maxLength
     *
     * @param int|null $maxLength The maximum number of characters allowed for entry in the Quick Base product for this field.
     *
     * @return $this
     */
    public function setMaxLength($maxLength)
    {
        $this->container['maxLength'] = $maxLength;

        return $this;
    }

    /**
     * Gets linkText
     *
     * @return string|null
     */
    public function getLinkText()
    {
        return $this->container['linkText'];
    }

    /**
     * Sets linkText
     *
     * @param string|null $linkText The configured text value that replaces the URL that users see within the product.
     *
     * @return $this
     */
    public function setLinkText($linkText)
    {
        $this->container['linkText'] = $linkText;

        return $this;
    }

    /**
     * Gets parentFieldId
     *
     * @return int|null
     */
    public function getParentFieldId()
    {
        return $this->container['parentFieldId'];
    }

    /**
     * Sets parentFieldId
     *
     * @param int|null $parentFieldId The id of the parent composite field, when applicable.
     *
     * @return $this
     */
    public function setParentFieldId($parentFieldId)
    {
        $this->container['parentFieldId'] = $parentFieldId;

        return $this;
    }

    /**
     * Gets displayTimezone
     *
     * @return bool|null
     */
    public function getDisplayTimezone()
    {
        return $this->container['displayTimezone'];
    }

    /**
     * Sets displayTimezone
     *
     * @param bool|null $displayTimezone Indicates whether to display the timezone within the product.
     *
     * @return $this
     */
    public function setDisplayTimezone($displayTimezone)
    {
        $this->container['displayTimezone'] = $displayTimezone;

        return $this;
    }

    /**
     * Gets allowNewChoices
     *
     * @return bool|null
     */
    public function getAllowNewChoices()
    {
        return $this->container['allowNewChoices'];
    }

    /**
     * Sets allowNewChoices
     *
     * @param bool|null $allowNewChoices Indicates if users can add new choices to a selection list.
     *
     * @return $this
     */
    public function setAllowNewChoices($allowNewChoices)
    {
        $this->container['allowNewChoices'] = $allowNewChoices;

        return $this;
    }

    /**
     * Gets defaultToday
     *
     * @return bool|null
     */
    public function getDefaultToday()
    {
        return $this->container['defaultToday'];
    }

    /**
     * Sets defaultToday
     *
     * @param bool|null $defaultToday Indicates if the field value is defaulted today for new records.
     *
     * @return $this
     */
    public function setDefaultToday($defaultToday)
    {
        $this->container['defaultToday'] = $defaultToday;

        return $this;
    }

    /**
     * Gets units
     *
     * @return string|null
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param string|null $units The units label.
     *
     * @return $this
     */
    public function setUnits($units)
    {
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets sourceFieldId
     *
     * @return int|null
     */
    public function getSourceFieldId()
    {
        return $this->container['sourceFieldId'];
    }

    /**
     * Sets sourceFieldId
     *
     * @param int|null $sourceFieldId The id of the source field.
     *
     * @return $this
     */
    public function setSourceFieldId($sourceFieldId)
    {
        $this->container['sourceFieldId'] = $sourceFieldId;

        return $this;
    }

    /**
     * Gets doesAverage
     *
     * @return bool|null
     */
    public function getDoesAverage()
    {
        return $this->container['doesAverage'];
    }

    /**
     * Sets doesAverage
     *
     * @param bool|null $doesAverage Whether this field averages in reports within the product.
     *
     * @return $this
     */
    public function setDoesAverage($doesAverage)
    {
        $this->container['doesAverage'] = $doesAverage;

        return $this;
    }

    /**
     * Gets formula
     *
     * @return string|null
     */
    public function getFormula()
    {
        return $this->container['formula'];
    }

    /**
     * Sets formula
     *
     * @param string|null $formula The formula of the field as configured in Quick Base.
     *
     * @return $this
     */
    public function setFormula($formula)
    {
        $this->container['formula'] = $formula;

        return $this;
    }

    /**
     * Gets decimalPlaces
     *
     * @return int|null
     */
    public function getDecimalPlaces()
    {
        return $this->container['decimalPlaces'];
    }

    /**
     * Sets decimalPlaces
     *
     * @param int|null $decimalPlaces The number of decimal places displayed in the product for this field.
     *
     * @return $this
     */
    public function setDecimalPlaces($decimalPlaces)
    {
        $this->container['decimalPlaces'] = $decimalPlaces;

        return $this;
    }

    /**
     * Gets displayMonth
     *
     * @return string|null
     */
    public function getDisplayMonth()
    {
        return $this->container['displayMonth'];
    }

    /**
     * Sets displayMonth
     *
     * @param string|null $displayMonth How to display months.
     *
     * @return $this
     */
    public function setDisplayMonth($displayMonth)
    {
        $this->container['displayMonth'] = $displayMonth;

        return $this;
    }

    /**
     * Gets seeVersions
     *
     * @return bool|null
     */
    public function getSeeVersions()
    {
        return $this->container['seeVersions'];
    }

    /**
     * Sets seeVersions
     *
     * @param bool|null $seeVersions Indicates if the user can see other versions, aside from the most recent, of a file attachment within the product.
     *
     * @return $this
     */
    public function setSeeVersions($seeVersions)
    {
        $this->container['seeVersions'] = $seeVersions;

        return $this;
    }

    /**
     * Gets numLines
     *
     * @return int|null
     */
    public function getNumLines()
    {
        return $this->container['numLines'];
    }

    /**
     * Sets numLines
     *
     * @param int|null $numLines The number of lines shown in the Quick Base product for this text field.
     *
     * @return $this
     */
    public function setNumLines($numLines)
    {
        $this->container['numLines'] = $numLines;

        return $this;
    }

    /**
     * Gets defaultKind
     *
     * @return string|null
     */
    public function getDefaultKind()
    {
        return $this->container['defaultKind'];
    }

    /**
     * Sets defaultKind
     *
     * @param string|null $defaultKind The user default type.
     *
     * @return $this
     */
    public function setDefaultKind($defaultKind)
    {
        $this->container['defaultKind'] = $defaultKind;

        return $this;
    }

    /**
     * Gets displayEmail
     *
     * @return string|null
     */
    public function getDisplayEmail()
    {
        return $this->container['displayEmail'];
    }

    /**
     * Sets displayEmail
     *
     * @param string|null $displayEmail How the email is displayed.
     *
     * @return $this
     */
    public function setDisplayEmail($displayEmail)
    {
        $this->container['displayEmail'] = $displayEmail;

        return $this;
    }

    /**
     * Gets currencySymbol
     *
     * @return string|null
     */
    public function getCurrencySymbol()
    {
        return $this->container['currencySymbol'];
    }

    /**
     * Sets currencySymbol
     *
     * @param string|null $currencySymbol The current symbol used when displaying field values within the product.
     *
     * @return $this
     */
    public function setCurrencySymbol($currencySymbol)
    {
        $this->container['currencySymbol'] = $currencySymbol;

        return $this;
    }

    /**
     * Gets targetFieldId
     *
     * @return int|null
     */
    public function getTargetFieldId()
    {
        return $this->container['targetFieldId'];
    }

    /**
     * Sets targetFieldId
     *
     * @param int|null $targetFieldId The id of the target field.
     *
     * @return $this
     */
    public function setTargetFieldId($targetFieldId)
    {
        $this->container['targetFieldId'] = $targetFieldId;

        return $this;
    }

    /**
     * Gets displayUser
     *
     * @return string|null
     */
    public function getDisplayUser()
    {
        return $this->container['displayUser'];
    }

    /**
     * Sets displayUser
     *
     * @param string|null $displayUser The configured option for how users display within the product.
     *
     * @return $this
     */
    public function setDisplayUser($displayUser)
    {
        $this->container['displayUser'] = $displayUser;

        return $this;
    }

    /**
     * Gets blankIsZero
     *
     * @return bool|null
     */
    public function getBlankIsZero()
    {
        return $this->container['blankIsZero'];
    }

    /**
     * Sets blankIsZero
     *
     * @param bool|null $blankIsZero Whether a blank value is treated the same as 0 in calculations within the product.
     *
     * @return $this
     */
    public function setBlankIsZero($blankIsZero)
    {
        $this->container['blankIsZero'] = $blankIsZero;

        return $this;
    }

    /**
     * Gets exact
     *
     * @return bool|null
     */
    public function getExact()
    {
        return $this->container['exact'];
    }

    /**
     * Sets exact
     *
     * @param bool|null $exact Whether an exact match is required for a report link.
     *
     * @return $this
     */
    public function setExact($exact)
    {
        $this->container['exact'] = $exact;

        return $this;
    }

    /**
     * Gets defaultDomain
     *
     * @return string|null
     */
    public function getDefaultDomain()
    {
        return $this->container['defaultDomain'];
    }

    /**
     * Sets defaultDomain
     *
     * @param string|null $defaultDomain Default email domain.
     *
     * @return $this
     */
    public function setDefaultDomain($defaultDomain)
    {
        $this->container['defaultDomain'] = $defaultDomain;

        return $this;
    }

    /**
     * Gets defaultValue
     *
     * @return string|null
     */
    public function getDefaultValue()
    {
        return $this->container['defaultValue'];
    }

    /**
     * Sets defaultValue
     *
     * @param string|null $defaultValue The default value configured for a field when a new record is added.
     *
     * @return $this
     */
    public function setDefaultValue($defaultValue)
    {
        $this->container['defaultValue'] = $defaultValue;

        return $this;
    }

    /**
     * Gets abbreviate
     *
     * @return bool|null
     */
    public function getAbbreviate()
    {
        return $this->container['abbreviate'];
    }

    /**
     * Sets abbreviate
     *
     * @param bool|null $abbreviate Don't show the URL protocol when showing the URL.
     *
     * @return $this
     */
    public function setAbbreviate($abbreviate)
    {
        $this->container['abbreviate'] = $abbreviate;

        return $this;
    }

    /**
     * Gets numberFormat
     *
     * @return int|null
     */
    public function getNumberFormat()
    {
        return $this->container['numberFormat'];
    }

    /**
     * Sets numberFormat
     *
     * @param int|null $numberFormat The format used for displaying numeric values in the product (decimal, separators, digit group).
     *
     * @return $this
     */
    public function setNumberFormat($numberFormat)
    {
        $this->container['numberFormat'] = $numberFormat;

        return $this;
    }

    /**
     * Gets targetTableName
     *
     * @return string|null
     */
    public function getTargetTableName()
    {
        return $this->container['targetTableName'];
    }

    /**
     * Sets targetTableName
     *
     * @param string|null $targetTableName The field's target table name.
     *
     * @return $this
     */
    public function setTargetTableName($targetTableName)
    {
        $this->container['targetTableName'] = $targetTableName;

        return $this;
    }

    /**
     * Gets appearsAs
     *
     * @return string|null
     */
    public function getAppearsAs()
    {
        return $this->container['appearsAs'];
    }

    /**
     * Sets appearsAs
     *
     * @param string|null $appearsAs The link text, if empty, the url will be used as link text.
     *
     * @return $this
     */
    public function setAppearsAs($appearsAs)
    {
        $this->container['appearsAs'] = $appearsAs;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int|null $width The field's html input width in the product.
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets currencyFormat
     *
     * @return string|null
     */
    public function getCurrencyFormat()
    {
        return $this->container['currencyFormat'];
    }

    /**
     * Sets currencyFormat
     *
     * @param string|null $currencyFormat The currency format used when displaying field values within the product.
     *
     * @return $this
     */
    public function setCurrencyFormat($currencyFormat)
    {
        $this->container['currencyFormat'] = $currencyFormat;

        return $this;
    }

    /**
     * Gets displayImages
     *
     * @return bool|null
     */
    public function getDisplayImages()
    {
        return $this->container['displayImages'];
    }

    /**
     * Sets displayImages
     *
     * @param bool|null $displayImages Indicates whether images will display for file attachments on forms and reports within the product.
     *
     * @return $this
     */
    public function setDisplayImages($displayImages)
    {
        $this->container['displayImages'] = $displayImages;

        return $this;
    }

    /**
     * Gets displayDayOfWeek
     *
     * @return bool|null
     */
    public function getDisplayDayOfWeek()
    {
        return $this->container['displayDayOfWeek'];
    }

    /**
     * Sets displayDayOfWeek
     *
     * @param bool|null $displayDayOfWeek Indicates whether to display the day of the week within the product.
     *
     * @return $this
     */
    public function setDisplayDayOfWeek($displayDayOfWeek)
    {
        $this->container['displayDayOfWeek'] = $displayDayOfWeek;

        return $this;
    }

    /**
     * Gets commaStart
     *
     * @return int|null
     */
    public function getCommaStart()
    {
        return $this->container['commaStart'];
    }

    /**
     * Sets commaStart
     *
     * @param int|null $commaStart The number of digits before commas display in the product, when applicable.
     *
     * @return $this
     */
    public function setCommaStart($commaStart)
    {
        $this->container['commaStart'] = $commaStart;

        return $this;
    }

    /**
     * Gets choices
     *
     * @return string[]|null
     */
    public function getChoices()
    {
        return $this->container['choices'];
    }

    /**
     * Sets choices
     *
     * @param string[]|null $choices An array of entries that exist for a field that offers choices to the user. Note that these choices refer to the valid values of any records added in the future. You are allowed to remove values from the list of choices even if there are existing records with those values in this field. They will be displayed in red when users look at the data in the browser but there is no other effect. While updating a field with this property, the old choices are removed and replaced by the new choices.
     *
     * @return $this
     */
    public function setChoices($choices)
    {
        $this->container['choices'] = $choices;

        return $this;
    }

    /**
     * Gets targetTableId
     *
     * @return string|null
     */
    public function getTargetTableId()
    {
        return $this->container['targetTableId'];
    }

    /**
     * Sets targetTableId
     *
     * @param string|null $targetTableId The id of the target table.
     *
     * @return $this
     */
    public function setTargetTableId($targetTableId)
    {
        $this->container['targetTableId'] = $targetTableId;

        return $this;
    }

    /**
     * Gets displayRelative
     *
     * @return bool|null
     */
    public function getDisplayRelative()
    {
        return $this->container['displayRelative'];
    }

    /**
     * Sets displayRelative
     *
     * @param bool|null $displayRelative Whether to display time as relative.
     *
     * @return $this
     */
    public function setDisplayRelative($displayRelative)
    {
        $this->container['displayRelative'] = $displayRelative;

        return $this;
    }

    /**
     * Gets compositeFields
     *
     * @return string[]|null
     */
    public function getCompositeFields()
    {
        return $this->container['compositeFields'];
    }

    /**
     * Sets compositeFields
     *
     * @param string[]|null $compositeFields An array of the fields that make up a composite field (e.g., address).
     *
     * @return $this
     */
    public function setCompositeFields($compositeFields)
    {
        $this->container['compositeFields'] = $compositeFields;

        return $this;
    }

    /**
     * Gets displayTime
     *
     * @return bool|null
     */
    public function getDisplayTime()
    {
        return $this->container['displayTime'];
    }

    /**
     * Sets displayTime
     *
     * @param bool|null $displayTime Indicates whether to display the time, in addition to the date.
     *
     * @return $this
     */
    public function setDisplayTime($displayTime)
    {
        $this->container['displayTime'] = $displayTime;

        return $this;
    }

    /**
     * Gets versionMode
     *
     * @return int|null
     */
    public function getVersionMode()
    {
        return $this->container['versionMode'];
    }

    /**
     * Sets versionMode
     *
     * @param int|null $versionMode Version modes for files. Keep all versions vs keep last version.
     *
     * @return $this
     */
    public function setVersionMode($versionMode)
    {
        $this->container['versionMode'] = $versionMode;

        return $this;
    }

    /**
     * Gets snapFieldId
     *
     * @return int|null
     */
    public function getSnapFieldId()
    {
        return $this->container['snapFieldId'];
    }

    /**
     * Sets snapFieldId
     *
     * @param int|null $snapFieldId The id of the field that is used to snapshot values from, when applicable.
     *
     * @return $this
     */
    public function setSnapFieldId($snapFieldId)
    {
        $this->container['snapFieldId'] = $snapFieldId;

        return $this;
    }

    /**
     * Gets hours24
     *
     * @return bool|null
     */
    public function getHours24()
    {
        return $this->container['hours24'];
    }

    /**
     * Sets hours24
     *
     * @param bool|null $hours24 Indicates whether or not to display time in the 24-hour format within the product.
     *
     * @return $this
     */
    public function setHours24($hours24)
    {
        $this->container['hours24'] = $hours24;

        return $this;
    }

    /**
     * Gets sortAlpha
     *
     * @return bool|null
     */
    public function getSortAlpha()
    {
        return $this->container['sortAlpha'];
    }

    /**
     * Sets sortAlpha
     *
     * @param bool|null $sortAlpha Whether to sort alphabetically, default sort is by record ID.
     *
     * @return $this
     */
    public function setSortAlpha($sortAlpha)
    {
        $this->container['sortAlpha'] = $sortAlpha;

        return $this;
    }

    /**
     * Gets sortAsGiven
     *
     * @return bool|null
     */
    public function getSortAsGiven()
    {
        return $this->container['sortAsGiven'];
    }

    /**
     * Sets sortAsGiven
     *
     * @param bool|null $sortAsGiven Indicates if the listed entries sort as entered vs alphabetically.
     *
     * @return $this
     */
    public function setSortAsGiven($sortAsGiven)
    {
        $this->container['sortAsGiven'] = $sortAsGiven;

        return $this;
    }

    /**
     * Gets hasExtension
     *
     * @return bool|null
     */
    public function getHasExtension()
    {
        return $this->container['hasExtension'];
    }

    /**
     * Sets hasExtension
     *
     * @param bool|null $hasExtension Whether this field has a phone extension.
     *
     * @return $this
     */
    public function setHasExtension($hasExtension)
    {
        $this->container['hasExtension'] = $hasExtension;

        return $this;
    }

    /**
     * Gets useNewWindow
     *
     * @return bool|null
     */
    public function getUseNewWindow()
    {
        return $this->container['useNewWindow'];
    }

    /**
     * Sets useNewWindow
     *
     * @param bool|null $useNewWindow Indicates if the URL should open a new window when a user clicks it within the product.
     *
     * @return $this
     */
    public function setUseNewWindow($useNewWindow)
    {
        $this->container['useNewWindow'] = $useNewWindow;

        return $this;
    }

    /**
     * Gets appendOnly
     *
     * @return bool|null
     */
    public function getAppendOnly()
    {
        return $this->container['appendOnly'];
    }

    /**
     * Sets appendOnly
     *
     * @param bool|null $appendOnly Whether this field is append only.
     *
     * @return $this
     */
    public function setAppendOnly($appendOnly)
    {
        $this->container['appendOnly'] = $appendOnly;

        return $this;
    }

    /**
     * Gets displayAsLink
     *
     * @return bool|null
     */
    public function getDisplayAsLink()
    {
        return $this->container['displayAsLink'];
    }

    /**
     * Sets displayAsLink
     *
     * @param bool|null $displayAsLink Indicates if a field that is part of the relationship should be shown as a hyperlink to the parent record within the product.
     *
     * @return $this
     */
    public function setDisplayAsLink($displayAsLink)
    {
        $this->container['displayAsLink'] = $displayAsLink;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


