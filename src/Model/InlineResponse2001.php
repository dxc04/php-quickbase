<?php
/**
 * InlineResponse2001
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Rossity\PhpQuickbase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Quick Base API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Rossity\PhpQuickbase\Model;

use \ArrayAccess;
use \Rossity\PhpQuickbase\ObjectSerializer;

/**
 * InlineResponse2001 Class Doc Comment
 *
 * @category Class
 * @package  Rossity\PhpQuickbase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineResponse2001 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'id' => 'string',
        'alias' => 'string',
        'description' => 'string',
        'created' => 'string',
        'updated' => 'string',
        'nextRecordId' => 'int',
        'nextFieldId' => 'int',
        'defaultSortFieldId' => 'int',
        'defaultSortOrder' => 'string',
        'keyFieldId' => 'int',
        'singleRecordName' => 'string',
        'pluralRecordName' => 'string',
        'sizeLimit' => 'string',
        'spaceUsed' => 'string',
        'spaceRemaining' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'id' => null,
        'alias' => null,
        'description' => null,
        'created' => null,
        'updated' => null,
        'nextRecordId' => null,
        'nextFieldId' => null,
        'defaultSortFieldId' => null,
        'defaultSortOrder' => null,
        'keyFieldId' => null,
        'singleRecordName' => null,
        'pluralRecordName' => null,
        'sizeLimit' => null,
        'spaceUsed' => null,
        'spaceRemaining' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'id' => 'id',
        'alias' => 'alias',
        'description' => 'description',
        'created' => 'created',
        'updated' => 'updated',
        'nextRecordId' => 'nextRecordId',
        'nextFieldId' => 'nextFieldId',
        'defaultSortFieldId' => 'defaultSortFieldId',
        'defaultSortOrder' => 'defaultSortOrder',
        'keyFieldId' => 'keyFieldId',
        'singleRecordName' => 'singleRecordName',
        'pluralRecordName' => 'pluralRecordName',
        'sizeLimit' => 'sizeLimit',
        'spaceUsed' => 'spaceUsed',
        'spaceRemaining' => 'spaceRemaining'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'id' => 'setId',
        'alias' => 'setAlias',
        'description' => 'setDescription',
        'created' => 'setCreated',
        'updated' => 'setUpdated',
        'nextRecordId' => 'setNextRecordId',
        'nextFieldId' => 'setNextFieldId',
        'defaultSortFieldId' => 'setDefaultSortFieldId',
        'defaultSortOrder' => 'setDefaultSortOrder',
        'keyFieldId' => 'setKeyFieldId',
        'singleRecordName' => 'setSingleRecordName',
        'pluralRecordName' => 'setPluralRecordName',
        'sizeLimit' => 'setSizeLimit',
        'spaceUsed' => 'setSpaceUsed',
        'spaceRemaining' => 'setSpaceRemaining'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'id' => 'getId',
        'alias' => 'getAlias',
        'description' => 'getDescription',
        'created' => 'getCreated',
        'updated' => 'getUpdated',
        'nextRecordId' => 'getNextRecordId',
        'nextFieldId' => 'getNextFieldId',
        'defaultSortFieldId' => 'getDefaultSortFieldId',
        'defaultSortOrder' => 'getDefaultSortOrder',
        'keyFieldId' => 'getKeyFieldId',
        'singleRecordName' => 'getSingleRecordName',
        'pluralRecordName' => 'getPluralRecordName',
        'sizeLimit' => 'getSizeLimit',
        'spaceUsed' => 'getSpaceUsed',
        'spaceRemaining' => 'getSpaceRemaining'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DEFAULT_SORT_ORDER_ASC = 'ASC';
    const DEFAULT_SORT_ORDER_DESC = 'DESC';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultSortOrderAllowableValues()
    {
        return [
            self::DEFAULT_SORT_ORDER_ASC,
            self::DEFAULT_SORT_ORDER_DESC,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['alias'] = $data['alias'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['created'] = $data['created'] ?? null;
        $this->container['updated'] = $data['updated'] ?? null;
        $this->container['nextRecordId'] = $data['nextRecordId'] ?? null;
        $this->container['nextFieldId'] = $data['nextFieldId'] ?? null;
        $this->container['defaultSortFieldId'] = $data['defaultSortFieldId'] ?? null;
        $this->container['defaultSortOrder'] = $data['defaultSortOrder'] ?? null;
        $this->container['keyFieldId'] = $data['keyFieldId'] ?? null;
        $this->container['singleRecordName'] = $data['singleRecordName'] ?? null;
        $this->container['pluralRecordName'] = $data['pluralRecordName'] ?? null;
        $this->container['sizeLimit'] = $data['sizeLimit'] ?? null;
        $this->container['spaceUsed'] = $data['spaceUsed'] ?? null;
        $this->container['spaceRemaining'] = $data['spaceRemaining'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDefaultSortOrderAllowableValues();
        if (!is_null($this->container['defaultSortOrder']) && !in_array($this->container['defaultSortOrder'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'defaultSortOrder', must be one of '%s'",
                $this->container['defaultSortOrder'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the table.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier (dbid) of the table.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets alias
     *
     * @return string|null
     */
    public function getAlias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     *
     * @param string|null $alias The automatically-created table alias for the table.
     *
     * @return self
     */
    public function setAlias($alias)
    {
        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of the table, as configured by an application administrator.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string|null $created The time and date when the table was created, in the ISO 8601 time format YYYY-MM-DDThh:mm:ss.sssZ (in UTC time zone).
     *
     * @return self
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return string|null
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param string|null $updated The time and date when the table schema or data was last updated, in the ISO 8601 time format YYYY-MM-DDThh:mm:ss.sssZ (in UTC time zone).
     *
     * @return self
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets nextRecordId
     *
     * @return int|null
     */
    public function getNextRecordId()
    {
        return $this->container['nextRecordId'];
    }

    /**
     * Sets nextRecordId
     *
     * @param int|null $nextRecordId The incremental Record ID that will be used when the next record is created, as determined when the API call was ran.
     *
     * @return self
     */
    public function setNextRecordId($nextRecordId)
    {
        $this->container['nextRecordId'] = $nextRecordId;

        return $this;
    }

    /**
     * Gets nextFieldId
     *
     * @return int|null
     */
    public function getNextFieldId()
    {
        return $this->container['nextFieldId'];
    }

    /**
     * Sets nextFieldId
     *
     * @param int|null $nextFieldId The incremental Field ID that will be used when the next field is created, as determined when the API call was ran.
     *
     * @return self
     */
    public function setNextFieldId($nextFieldId)
    {
        $this->container['nextFieldId'] = $nextFieldId;

        return $this;
    }

    /**
     * Gets defaultSortFieldId
     *
     * @return int|null
     */
    public function getDefaultSortFieldId()
    {
        return $this->container['defaultSortFieldId'];
    }

    /**
     * Sets defaultSortFieldId
     *
     * @param int|null $defaultSortFieldId The id of the field that is configured for default sorting.
     *
     * @return self
     */
    public function setDefaultSortFieldId($defaultSortFieldId)
    {
        $this->container['defaultSortFieldId'] = $defaultSortFieldId;

        return $this;
    }

    /**
     * Gets defaultSortOrder
     *
     * @return string|null
     */
    public function getDefaultSortOrder()
    {
        return $this->container['defaultSortOrder'];
    }

    /**
     * Sets defaultSortOrder
     *
     * @param string|null $defaultSortOrder The configuration of the default sort order on the table.
     *
     * @return self
     */
    public function setDefaultSortOrder($defaultSortOrder)
    {
        $allowedValues = $this->getDefaultSortOrderAllowableValues();
        if (!is_null($defaultSortOrder) && !in_array($defaultSortOrder, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'defaultSortOrder', must be one of '%s'",
                    $defaultSortOrder,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['defaultSortOrder'] = $defaultSortOrder;

        return $this;
    }

    /**
     * Gets keyFieldId
     *
     * @return int|null
     */
    public function getKeyFieldId()
    {
        return $this->container['keyFieldId'];
    }

    /**
     * Sets keyFieldId
     *
     * @param int|null $keyFieldId The id of the field that is configured to be the key on this table, which is usually the Quick Base Record ID.
     *
     * @return self
     */
    public function setKeyFieldId($keyFieldId)
    {
        $this->container['keyFieldId'] = $keyFieldId;

        return $this;
    }

    /**
     * Gets singleRecordName
     *
     * @return string|null
     */
    public function getSingleRecordName()
    {
        return $this->container['singleRecordName'];
    }

    /**
     * Sets singleRecordName
     *
     * @param string|null $singleRecordName The builder-configured singular noun of the table.
     *
     * @return self
     */
    public function setSingleRecordName($singleRecordName)
    {
        $this->container['singleRecordName'] = $singleRecordName;

        return $this;
    }

    /**
     * Gets pluralRecordName
     *
     * @return string|null
     */
    public function getPluralRecordName()
    {
        return $this->container['pluralRecordName'];
    }

    /**
     * Sets pluralRecordName
     *
     * @param string|null $pluralRecordName The builder-configured plural noun of the table.
     *
     * @return self
     */
    public function setPluralRecordName($pluralRecordName)
    {
        $this->container['pluralRecordName'] = $pluralRecordName;

        return $this;
    }

    /**
     * Gets sizeLimit
     *
     * @return string|null
     */
    public function getSizeLimit()
    {
        return $this->container['sizeLimit'];
    }

    /**
     * Sets sizeLimit
     *
     * @param string|null $sizeLimit The size limit for the table.
     *
     * @return self
     */
    public function setSizeLimit($sizeLimit)
    {
        $this->container['sizeLimit'] = $sizeLimit;

        return $this;
    }

    /**
     * Gets spaceUsed
     *
     * @return string|null
     */
    public function getSpaceUsed()
    {
        return $this->container['spaceUsed'];
    }

    /**
     * Sets spaceUsed
     *
     * @param string|null $spaceUsed The amount of space currently being used by the table.
     *
     * @return self
     */
    public function setSpaceUsed($spaceUsed)
    {
        $this->container['spaceUsed'] = $spaceUsed;

        return $this;
    }

    /**
     * Gets spaceRemaining
     *
     * @return string|null
     */
    public function getSpaceRemaining()
    {
        return $this->container['spaceRemaining'];
    }

    /**
     * Sets spaceRemaining
     *
     * @param string|null $spaceRemaining The amount of space remaining for use by the table.
     *
     * @return self
     */
    public function setSpaceRemaining($spaceRemaining)
    {
        $this->container['spaceRemaining'] = $spaceRemaining;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


