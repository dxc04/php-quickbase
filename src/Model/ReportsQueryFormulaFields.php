<?php
/**
 * ReportsQueryFormulaFields
 *
 * PHP version 5
 *
 * @category Class
 * @package  Rossity\PhpQuickbase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Quick Base API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Rossity\PhpQuickbase\Model;

use \ArrayAccess;
use \Rossity\PhpQuickbase\ObjectSerializer;

/**
 * ReportsQueryFormulaFields Class Doc Comment
 *
 * @category Class
 * @package  Rossity\PhpQuickbase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReportsQueryFormulaFields implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_reports_query_formulaFields';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'label' => 'string',
        'fieldType' => 'string',
        'formula' => 'string',
        'decimalPrecision' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'label' => null,
        'fieldType' => null,
        'formula' => null,
        'decimalPrecision' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'label' => 'label',
        'fieldType' => 'fieldType',
        'formula' => 'formula',
        'decimalPrecision' => 'decimalPrecision'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'label' => 'setLabel',
        'fieldType' => 'setFieldType',
        'formula' => 'setFormula',
        'decimalPrecision' => 'setDecimalPrecision'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'label' => 'getLabel',
        'fieldType' => 'getFieldType',
        'formula' => 'getFormula',
        'decimalPrecision' => 'getDecimalPrecision'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const FIELD_TYPE_RICH_TEXT = 'rich-text';
    const FIELD_TYPE_TEXT = 'text';
    const FIELD_TYPE_NUMERIC = 'numeric';
    const FIELD_TYPE_CURRENCY = 'currency';
    const FIELD_TYPE_PERCENT = 'percent';
    const FIELD_TYPE_RATING = 'rating';
    const FIELD_TYPE_DATE = 'date';
    const FIELD_TYPE_TIMESTAMP = 'timestamp';
    const FIELD_TYPE_TIMEOFDAY = 'timeofday';
    const FIELD_TYPE_DURATION = 'duration';
    const FIELD_TYPE_CHECKBOX = 'checkbox';
    const FIELD_TYPE_PHONE = 'phone';
    const FIELD_TYPE_EMAIL = 'email';
    const FIELD_TYPE_USER = 'user';
    const FIELD_TYPE_MULTIUSER = 'multiuser';
    const FIELD_TYPE_URL = 'url';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFieldTypeAllowableValues()
    {
        return [
            self::FIELD_TYPE_RICH_TEXT,
            self::FIELD_TYPE_TEXT,
            self::FIELD_TYPE_NUMERIC,
            self::FIELD_TYPE_CURRENCY,
            self::FIELD_TYPE_PERCENT,
            self::FIELD_TYPE_RATING,
            self::FIELD_TYPE_DATE,
            self::FIELD_TYPE_TIMESTAMP,
            self::FIELD_TYPE_TIMEOFDAY,
            self::FIELD_TYPE_DURATION,
            self::FIELD_TYPE_CHECKBOX,
            self::FIELD_TYPE_PHONE,
            self::FIELD_TYPE_EMAIL,
            self::FIELD_TYPE_USER,
            self::FIELD_TYPE_MULTIUSER,
            self::FIELD_TYPE_URL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['fieldType'] = isset($data['fieldType']) ? $data['fieldType'] : null;
        $this->container['formula'] = isset($data['formula']) ? $data['formula'] : null;
        $this->container['decimalPrecision'] = isset($data['decimalPrecision']) ? $data['decimalPrecision'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFieldTypeAllowableValues();
        if (!is_null($this->container['fieldType']) && !in_array($this->container['fieldType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'fieldType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Formula field identifier.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label Formula field label.
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets fieldType
     *
     * @return string|null
     */
    public function getFieldType()
    {
        return $this->container['fieldType'];
    }

    /**
     * Sets fieldType
     *
     * @param string|null $fieldType Resulting formula value type.
     *
     * @return $this
     */
    public function setFieldType($fieldType)
    {
        $allowedValues = $this->getFieldTypeAllowableValues();
        if (!is_null($fieldType) && !in_array($fieldType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'fieldType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fieldType'] = $fieldType;

        return $this;
    }

    /**
     * Gets formula
     *
     * @return string|null
     */
    public function getFormula()
    {
        return $this->container['formula'];
    }

    /**
     * Sets formula
     *
     * @param string|null $formula Formula text.
     *
     * @return $this
     */
    public function setFormula($formula)
    {
        $this->container['formula'] = $formula;

        return $this;
    }

    /**
     * Gets decimalPrecision
     *
     * @return int|null
     */
    public function getDecimalPrecision()
    {
        return $this->container['decimalPrecision'];
    }

    /**
     * Sets decimalPrecision
     *
     * @param int|null $decimalPrecision For numeric formula the number precision.
     *
     * @return $this
     */
    public function setDecimalPrecision($decimalPrecision)
    {
        $this->container['decimalPrecision'] = $decimalPrecision;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


