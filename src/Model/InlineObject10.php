<?php
/**
 * InlineObject10
 *
 * PHP version 5
 *
 * @category Class
 * @package  Rossity\PhpQuickbase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Quick Base API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Rossity\PhpQuickbase\Model;

use \ArrayAccess;
use \Rossity\PhpQuickbase\ObjectSerializer;

/**
 * InlineObject10 Class Doc Comment
 *
 * @category Class
 * @description The example below shows all the properties that can be changed with this request. Additional properties that you can see with the corresponding GET request cannot be set through this API.
 * @package  Rossity\PhpQuickbase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineObject10 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_10';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'audited' => 'bool',
        'fieldHelp' => 'string',
        'bold' => 'bool',
        'required' => 'bool',
        'properties' => '\Rossity\PhpQuickbase\Model\FieldsFieldIdProperties',
        'appearsByDefault' => 'bool',
        'unique' => 'bool',
        'permissions' => '\Rossity\PhpQuickbase\Model\FieldsPermissions[]',
        'addToForms' => 'bool',
        'label' => 'string',
        'findEnabled' => 'bool',
        'noWrap' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'audited' => null,
        'fieldHelp' => null,
        'bold' => null,
        'required' => null,
        'properties' => null,
        'appearsByDefault' => null,
        'unique' => null,
        'permissions' => null,
        'addToForms' => null,
        'label' => null,
        'findEnabled' => null,
        'noWrap' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'audited' => 'audited',
        'fieldHelp' => 'fieldHelp',
        'bold' => 'bold',
        'required' => 'required',
        'properties' => 'properties',
        'appearsByDefault' => 'appearsByDefault',
        'unique' => 'unique',
        'permissions' => 'permissions',
        'addToForms' => 'addToForms',
        'label' => 'label',
        'findEnabled' => 'findEnabled',
        'noWrap' => 'noWrap'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'audited' => 'setAudited',
        'fieldHelp' => 'setFieldHelp',
        'bold' => 'setBold',
        'required' => 'setRequired',
        'properties' => 'setProperties',
        'appearsByDefault' => 'setAppearsByDefault',
        'unique' => 'setUnique',
        'permissions' => 'setPermissions',
        'addToForms' => 'setAddToForms',
        'label' => 'setLabel',
        'findEnabled' => 'setFindEnabled',
        'noWrap' => 'setNoWrap'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'audited' => 'getAudited',
        'fieldHelp' => 'getFieldHelp',
        'bold' => 'getBold',
        'required' => 'getRequired',
        'properties' => 'getProperties',
        'appearsByDefault' => 'getAppearsByDefault',
        'unique' => 'getUnique',
        'permissions' => 'getPermissions',
        'addToForms' => 'getAddToForms',
        'label' => 'getLabel',
        'findEnabled' => 'getFindEnabled',
        'noWrap' => 'getNoWrap'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['audited'] = isset($data['audited']) ? $data['audited'] : null;
        $this->container['fieldHelp'] = isset($data['fieldHelp']) ? $data['fieldHelp'] : null;
        $this->container['bold'] = isset($data['bold']) ? $data['bold'] : null;
        $this->container['required'] = isset($data['required']) ? $data['required'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['appearsByDefault'] = isset($data['appearsByDefault']) ? $data['appearsByDefault'] : null;
        $this->container['unique'] = isset($data['unique']) ? $data['unique'] : null;
        $this->container['permissions'] = isset($data['permissions']) ? $data['permissions'] : null;
        $this->container['addToForms'] = isset($data['addToForms']) ? $data['addToForms'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['findEnabled'] = isset($data['findEnabled']) ? $data['findEnabled'] : null;
        $this->container['noWrap'] = isset($data['noWrap']) ? $data['noWrap'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets audited
     *
     * @return bool|null
     */
    public function getAudited()
    {
        return $this->container['audited'];
    }

    /**
     * Sets audited
     *
     * @param bool|null $audited Indicates if the field is being tracked as part of Quick Base Audit Logs. You can only set this property to \"true\" if the app has audit logs enabled. See Enable data change logs under [Quick Base Audit Logs](https://help.quickbase.com/user-assistance/audit_logs.html).
     *
     * @return $this
     */
    public function setAudited($audited)
    {
        $this->container['audited'] = $audited;

        return $this;
    }

    /**
     * Gets fieldHelp
     *
     * @return string|null
     */
    public function getFieldHelp()
    {
        return $this->container['fieldHelp'];
    }

    /**
     * Sets fieldHelp
     *
     * @param string|null $fieldHelp The configured help text shown to users within the product.
     *
     * @return $this
     */
    public function setFieldHelp($fieldHelp)
    {
        $this->container['fieldHelp'] = $fieldHelp;

        return $this;
    }

    /**
     * Gets bold
     *
     * @return bool|null
     */
    public function getBold()
    {
        return $this->container['bold'];
    }

    /**
     * Sets bold
     *
     * @param bool|null $bold Indicates if the field is configured to display in bold in the product.
     *
     * @return $this
     */
    public function setBold($bold)
    {
        $this->container['bold'] = $bold;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool|null
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool|null $required Indicates if the field is required (i.e. if every record must have a non-null value in this field). If you attempt to change a field from not-required to required, and the table currently contains records that have null values in that field, you will get an error indicating that there are null values of the field. In this case you need to find and update those records with null values of the field before changing the field to required.
     *
     * @return $this
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \Rossity\PhpQuickbase\Model\FieldsFieldIdProperties|null
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \Rossity\PhpQuickbase\Model\FieldsFieldIdProperties|null $properties properties
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets appearsByDefault
     *
     * @return bool|null
     */
    public function getAppearsByDefault()
    {
        return $this->container['appearsByDefault'];
    }

    /**
     * Sets appearsByDefault
     *
     * @param bool|null $appearsByDefault Indicates if the field is marked as a default in reports.
     *
     * @return $this
     */
    public function setAppearsByDefault($appearsByDefault)
    {
        $this->container['appearsByDefault'] = $appearsByDefault;

        return $this;
    }

    /**
     * Gets unique
     *
     * @return bool|null
     */
    public function getUnique()
    {
        return $this->container['unique'];
    }

    /**
     * Sets unique
     *
     * @param bool|null $unique Indicates if every record in the table must contain a unique value of this field. If you attempt to change a field from not-unique to unique, and the table currently contains records with the same value of this field, you will get an error. In this case you need to find and update those records with duplicate values of the field before changing the field to unique.
     *
     * @return $this
     */
    public function setUnique($unique)
    {
        $this->container['unique'] = $unique;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return \Rossity\PhpQuickbase\Model\FieldsPermissions[]|null
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param \Rossity\PhpQuickbase\Model\FieldsPermissions[]|null $permissions Field Permissions for different roles.
     *
     * @return $this
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets addToForms
     *
     * @return bool|null
     */
    public function getAddToForms()
    {
        return $this->container['addToForms'];
    }

    /**
     * Sets addToForms
     *
     * @param bool|null $addToForms Whether the field you are adding should appear on forms.
     *
     * @return $this
     */
    public function setAddToForms($addToForms)
    {
        $this->container['addToForms'] = $addToForms;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label The label (name) of the field.
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets findEnabled
     *
     * @return bool|null
     */
    public function getFindEnabled()
    {
        return $this->container['findEnabled'];
    }

    /**
     * Sets findEnabled
     *
     * @param bool|null $findEnabled Indicates if the field is marked as searchable.
     *
     * @return $this
     */
    public function setFindEnabled($findEnabled)
    {
        $this->container['findEnabled'] = $findEnabled;

        return $this;
    }

    /**
     * Gets noWrap
     *
     * @return bool|null
     */
    public function getNoWrap()
    {
        return $this->container['noWrap'];
    }

    /**
     * Sets noWrap
     *
     * @param bool|null $noWrap Indicates if the field is configured to not wrap when displayed in the product.
     *
     * @return $this
     */
    public function setNoWrap($noWrap)
    {
        $this->container['noWrap'] = $noWrap;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


