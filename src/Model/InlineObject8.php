<?php
/**
 * InlineObject8
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Rossity\PhpQuickbase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Quick Base API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Rossity\PhpQuickbase\Model;

use \ArrayAccess;
use \Rossity\PhpQuickbase\ObjectSerializer;

/**
 * InlineObject8 Class Doc Comment
 *
 * @category Class
 * @description The example below shows all the properties that can be changed with this request. Additional properties that you can see with the corresponding GET request cannot be set through this API.
 * @package  Rossity\PhpQuickbase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineObject8 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_8';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'audited' => 'bool',
        'fieldHelp' => 'string',
        'bold' => 'bool',
        'properties' => '\Rossity\PhpQuickbase\Model\FieldsProperties',
        'appearsByDefault' => 'bool',
        'fieldType' => 'string',
        'permissions' => '\Rossity\PhpQuickbase\Model\FieldsPermissions[]',
        'addToForms' => 'bool',
        'label' => 'string',
        'findEnabled' => 'bool',
        'noWrap' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'audited' => null,
        'fieldHelp' => null,
        'bold' => null,
        'properties' => null,
        'appearsByDefault' => null,
        'fieldType' => null,
        'permissions' => null,
        'addToForms' => null,
        'label' => null,
        'findEnabled' => null,
        'noWrap' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'audited' => 'audited',
        'fieldHelp' => 'fieldHelp',
        'bold' => 'bold',
        'properties' => 'properties',
        'appearsByDefault' => 'appearsByDefault',
        'fieldType' => 'fieldType',
        'permissions' => 'permissions',
        'addToForms' => 'addToForms',
        'label' => 'label',
        'findEnabled' => 'findEnabled',
        'noWrap' => 'noWrap'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'audited' => 'setAudited',
        'fieldHelp' => 'setFieldHelp',
        'bold' => 'setBold',
        'properties' => 'setProperties',
        'appearsByDefault' => 'setAppearsByDefault',
        'fieldType' => 'setFieldType',
        'permissions' => 'setPermissions',
        'addToForms' => 'setAddToForms',
        'label' => 'setLabel',
        'findEnabled' => 'setFindEnabled',
        'noWrap' => 'setNoWrap'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'audited' => 'getAudited',
        'fieldHelp' => 'getFieldHelp',
        'bold' => 'getBold',
        'properties' => 'getProperties',
        'appearsByDefault' => 'getAppearsByDefault',
        'fieldType' => 'getFieldType',
        'permissions' => 'getPermissions',
        'addToForms' => 'getAddToForms',
        'label' => 'getLabel',
        'findEnabled' => 'getFindEnabled',
        'noWrap' => 'getNoWrap'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const FIELD_TYPE_TEXT = 'text';
    const FIELD_TYPE_TEXT_MULTIPLE_CHOICE = 'text-multiple-choice';
    const FIELD_TYPE_TEXT_MULTI_LINE = 'text-multi-line';
    const FIELD_TYPE_RICH_TEXT = 'rich-text';
    const FIELD_TYPE_NUMERIC = 'numeric';
    const FIELD_TYPE_CURRENCY = 'currency';
    const FIELD_TYPE_RATING = 'rating';
    const FIELD_TYPE_PERCENT = 'percent';
    const FIELD_TYPE_MULTITEXT = 'multitext';
    const FIELD_TYPE_EMAIL = 'email';
    const FIELD_TYPE_URL = 'url';
    const FIELD_TYPE_DURATION = 'duration';
    const FIELD_TYPE_DATE = 'date';
    const FIELD_TYPE_DATETIME = 'datetime';
    const FIELD_TYPE_TIMESTAMP = 'timestamp';
    const FIELD_TYPE_TIMEOFDAY = 'timeofday';
    const FIELD_TYPE_CHECKBOX = 'checkbox';
    const FIELD_TYPE_USER = 'user';
    const FIELD_TYPE_MULTIUSER = 'multiuser';
    const FIELD_TYPE_ADDRESS = 'address';
    const FIELD_TYPE_PHONE = 'phone';
    const FIELD_TYPE_FILE = 'file';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFieldTypeAllowableValues()
    {
        return [
            self::FIELD_TYPE_TEXT,
            self::FIELD_TYPE_TEXT_MULTIPLE_CHOICE,
            self::FIELD_TYPE_TEXT_MULTI_LINE,
            self::FIELD_TYPE_RICH_TEXT,
            self::FIELD_TYPE_NUMERIC,
            self::FIELD_TYPE_CURRENCY,
            self::FIELD_TYPE_RATING,
            self::FIELD_TYPE_PERCENT,
            self::FIELD_TYPE_MULTITEXT,
            self::FIELD_TYPE_EMAIL,
            self::FIELD_TYPE_URL,
            self::FIELD_TYPE_DURATION,
            self::FIELD_TYPE_DATE,
            self::FIELD_TYPE_DATETIME,
            self::FIELD_TYPE_TIMESTAMP,
            self::FIELD_TYPE_TIMEOFDAY,
            self::FIELD_TYPE_CHECKBOX,
            self::FIELD_TYPE_USER,
            self::FIELD_TYPE_MULTIUSER,
            self::FIELD_TYPE_ADDRESS,
            self::FIELD_TYPE_PHONE,
            self::FIELD_TYPE_FILE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['audited'] = $data['audited'] ?? null;
        $this->container['fieldHelp'] = $data['fieldHelp'] ?? null;
        $this->container['bold'] = $data['bold'] ?? null;
        $this->container['properties'] = $data['properties'] ?? null;
        $this->container['appearsByDefault'] = $data['appearsByDefault'] ?? null;
        $this->container['fieldType'] = $data['fieldType'] ?? null;
        $this->container['permissions'] = $data['permissions'] ?? null;
        $this->container['addToForms'] = $data['addToForms'] ?? null;
        $this->container['label'] = $data['label'] ?? null;
        $this->container['findEnabled'] = $data['findEnabled'] ?? null;
        $this->container['noWrap'] = $data['noWrap'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['fieldType'] === null) {
            $invalidProperties[] = "'fieldType' can't be null";
        }
        $allowedValues = $this->getFieldTypeAllowableValues();
        if (!is_null($this->container['fieldType']) && !in_array($this->container['fieldType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fieldType', must be one of '%s'",
                $this->container['fieldType'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets audited
     *
     * @return bool|null
     */
    public function getAudited()
    {
        return $this->container['audited'];
    }

    /**
     * Sets audited
     *
     * @param bool|null $audited Indicates if the field is being tracked as part of Quick Base Audit Logs. You can only set this property to \"true\" if the app has audit logs enabled. See Enable data change logs under [Quick Base Audit Logs](https://help.quickbase.com/user-assistance/audit_logs.html).
     *
     * @return self
     */
    public function setAudited($audited)
    {
        $this->container['audited'] = $audited;

        return $this;
    }

    /**
     * Gets fieldHelp
     *
     * @return string|null
     */
    public function getFieldHelp()
    {
        return $this->container['fieldHelp'];
    }

    /**
     * Sets fieldHelp
     *
     * @param string|null $fieldHelp The configured help text shown to users within the product.
     *
     * @return self
     */
    public function setFieldHelp($fieldHelp)
    {
        $this->container['fieldHelp'] = $fieldHelp;

        return $this;
    }

    /**
     * Gets bold
     *
     * @return bool|null
     */
    public function getBold()
    {
        return $this->container['bold'];
    }

    /**
     * Sets bold
     *
     * @param bool|null $bold Indicates if the field is configured to display in bold in the product.
     *
     * @return self
     */
    public function setBold($bold)
    {
        $this->container['bold'] = $bold;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \Rossity\PhpQuickbase\Model\FieldsProperties|null
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \Rossity\PhpQuickbase\Model\FieldsProperties|null $properties properties
     *
     * @return self
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets appearsByDefault
     *
     * @return bool|null
     */
    public function getAppearsByDefault()
    {
        return $this->container['appearsByDefault'];
    }

    /**
     * Sets appearsByDefault
     *
     * @param bool|null $appearsByDefault Indicates if the field is marked as a default in reports.
     *
     * @return self
     */
    public function setAppearsByDefault($appearsByDefault)
    {
        $this->container['appearsByDefault'] = $appearsByDefault;

        return $this;
    }

    /**
     * Gets fieldType
     *
     * @return string
     */
    public function getFieldType()
    {
        return $this->container['fieldType'];
    }

    /**
     * Sets fieldType
     *
     * @param string $fieldType The [field types](https://help.quickbase.com/user-assistance/field_types.html), click on any of the field type links for more info.
     *
     * @return self
     */
    public function setFieldType($fieldType)
    {
        $allowedValues = $this->getFieldTypeAllowableValues();
        if (!in_array($fieldType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fieldType', must be one of '%s'",
                    $fieldType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fieldType'] = $fieldType;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return \Rossity\PhpQuickbase\Model\FieldsPermissions[]|null
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param \Rossity\PhpQuickbase\Model\FieldsPermissions[]|null $permissions Field Permissions for different roles.
     *
     * @return self
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets addToForms
     *
     * @return bool|null
     */
    public function getAddToForms()
    {
        return $this->container['addToForms'];
    }

    /**
     * Sets addToForms
     *
     * @param bool|null $addToForms Whether the field you are adding should appear on forms.
     *
     * @return self
     */
    public function setAddToForms($addToForms)
    {
        $this->container['addToForms'] = $addToForms;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label The label (name) of the field.
     *
     * @return self
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets findEnabled
     *
     * @return bool|null
     */
    public function getFindEnabled()
    {
        return $this->container['findEnabled'];
    }

    /**
     * Sets findEnabled
     *
     * @param bool|null $findEnabled Indicates if the field is marked as searchable.
     *
     * @return self
     */
    public function setFindEnabled($findEnabled)
    {
        $this->container['findEnabled'] = $findEnabled;

        return $this;
    }

    /**
     * Gets noWrap
     *
     * @return bool|null
     */
    public function getNoWrap()
    {
        return $this->container['noWrap'];
    }

    /**
     * Sets noWrap
     *
     * @param bool|null $noWrap Indicates if the field is configured to not wrap when displayed in the product.
     *
     * @return self
     */
    public function setNoWrap($noWrap)
    {
        $this->container['noWrap'] = $noWrap;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


